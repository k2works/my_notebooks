{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# SymPyで代数と式を計算する\n",
    "## 式の記号と記号演算を定義する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$2x + 1$\n",
    "\n",
    "$2xy$\n",
    "\n",
    "$2x^2$ \n",
    "\n",
    "$(x+2)(y+3)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting sympy\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Using cached https://files.pythonhosted.org/packages/dd/f6/ed485ff22efdd7b371d0dbbf6d77ad61c3b3b7e0815a83c89cbb38ce35de/sympy-1.3.tar.gz\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting mpmath>=0.19 (from sympy)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Using cached https://files.pythonhosted.org/packages/7a/05/b3d1472885d8dc0606936ea5da0ccb1b4785682e78ab15e34ada24aea8d5/mpmath-1.0.0.tar.gz\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Building wheels for collected packages: sympy, mpmath\r\n  Running setup.py bdist_wheel for sympy ... \u001b[?25l"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \bdone\r\n\u001b[?25h  Stored in directory: /Users/k2works/Library/Caches/pip/wheels/6c/59/86/478e3c0f298368c119095cc5985dedac57c0e35a85c737f823\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Running setup.py bdist_wheel for mpmath ... \u001b[?25l"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \bdone\r\n\u001b[?25h  Stored in directory: /Users/k2works/Library/Caches/pip/wheels/33/15/0f/9ca5f2ad88a5456803098daa189f382408a81556aa209e97ff\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully built sympy mpmath\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Installing collected packages: mpmath, sympy\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully installed mpmath-1.0.0 sympy-1.3\r\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "!{sys.executable} -m pip install sympy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol\n",
    "from sympy import symbols\n",
    "\n",
    "\n",
    "class TestSymPy(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        expect = x + x + 1\n",
    "        self.assertEqual(expect, 2 * x + 1)\n",
    "\n",
    "    def test_02(self):\n",
    "        a = Symbol('x')\n",
    "        expect = a + a + 1\n",
    "        self.assertEqual(expect, 2 * a + 1)\n",
    "\n",
    "    def test_03(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        s = x * y + x * y\n",
    "        self.assertEqual(s, 2 * x * y)\n",
    "\n",
    "    def test_04(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        p = x * (x + x)\n",
    "        self.assertEqual(p, 2 * x ** 2)\n",
    "\n",
    "        x, y = symbols('x,y')\n",
    "        p = x * (x + x)\n",
    "        self.assertEqual(p, 2 * x ** 2)\n",
    "\n",
    "    def test_05(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        p = (x + 2) * (x + 3)\n",
    "        self.assertEqual(p, (x + 2) * (x + 3))\n",
    "\n",
    "        x, y = symbols('x,y')\n",
    "        p = (x + 2) * (x + 3)\n",
    "        self.assertEqual(p, (x + 2) * (x + 3))\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 式を扱う\n",
    "### 式の因数分解と展開"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$x^2-y^2$ = $(x-y)(x+y)$\n",
    "\n",
    "$x3 + 3x^2y + 3xy^2 + y^3$ = $(x + y)^3$\n",
    "\n",
    "$x + y + xy$ = $xy + x + y$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 4 tests in 0.013s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol\n",
    "from sympy import factor, expand\n",
    "\n",
    "\n",
    "class TestSymPy(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x ** 2 - y ** 2\n",
    "        self.assertEqual(factor(expr), (x - y) * (x + y))\n",
    "        \n",
    "    def test_02(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x**2 - y**2\n",
    "        factors = factor(expr)\n",
    "        self.assertEqual(expand(factors), x**2 - y**2)\n",
    "        \n",
    "    def test_03(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x**3 + 3*x**2*y + 3*x*y**2 + y**3\n",
    "        factors = factor(expr)\n",
    "        self.assertEqual(factors,(x + y)**3)\n",
    "        self.assertEqual(expand(factors),x**3 + 3*x**2*y + 3*x*y**2 + y**3)\n",
    "\n",
    "    def test_04(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x + y + x*y\n",
    "        self.assertEqual(factor(expr), x*y + x + y)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### プリティプリント"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$x^2 + 2xy + y^2$\n",
    "\n",
    "$2x^2 + 2x + 1$\n",
    "\n",
    "$1 + 2x + 2x^2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x**2 + 2*x*y + y**2\n 2            2\nx  + 2⋅x⋅y + y \n   2          \n2⋅x  + 2⋅x + 1\n   2          \n2⋅x  + 2⋅x + 1\n"
     ]
    }
   ],
   "source": [
    "from sympy import Symbol\n",
    "from sympy import pprint\n",
    "from sympy import init_printing\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    x = Symbol('x')\n",
    "    y = Symbol('y')\n",
    "    expr = x*x + 2*x*y + y*y\n",
    "    print(expr)\n",
    "    pprint(expr, use_unicode=True)\n",
    "    expr = 1 + 2*x + 2*x**2\n",
    "    pprint(expr, use_unicode=True)\n",
    "    init_printing(order='rev-lex')\n",
    "    pprint(expr, use_unicode=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 級数を出力する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$x + \\frac{x^2}{2} + \\frac{x^3}{3} + \\frac{x^4}{4} + ... + \\frac{x^n}{n}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x\n 2    \nx     \n── + x\n2     \n 3    2    \nx    x     \n── + ── + x\n3    2     \n 4    3    2    \nx    x    x     \n── + ── + ── + x\n4    3    2     \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 5 tests in 0.028s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, pprint, init_printing\n",
    "\n",
    "'''\n",
    "級数を出力\n",
    "x + x**2 + x**3 + ... + x**n\n",
    "    ---    ---          ---\n",
    "     2      3            n\n",
    "xの値で級数の値を計算\n",
    "'''\n",
    "def print_series(n):\n",
    "    # 出力を逆順に初期化\n",
    "    init_printing(order='rev-lex')\n",
    "    x = Symbol('x')\n",
    "    series = x\n",
    "    for i in range(2, n + 1):\n",
    "        series = series + (x ** i) / i\n",
    "    pprint(series)\n",
    "    return series\n",
    "\n",
    "\n",
    "class TestPrintSeries(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        self.assertEqual(print_series(1), x)\n",
    "        self.assertEqual(print_series(2), x ** 2 / 2 + x)\n",
    "        self.assertEqual(print_series(3), x ** 3 / 3 + x ** 2 / 2 + x)\n",
    "        self.assertEqual(print_series(4), x ** 4 / 4 + x ** 3 / 3 + x ** 2 / 2 + x)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 値に代入する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "$xx + xy + xy + yy$ \n",
    "\n",
    "$x = 1, y = 2$ \n",
    "\n",
    "$9$ \n",
    "\n",
    "$x = y - 1$\n",
    "\n",
    "$y^2 + 2y(-y + 1)+(-y + 1)^2$ \n",
    "\n",
    "$y^2 - 2y^2 + 2y + y^2 -2y + 1$ \n",
    "\n",
    "$1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x\n 2    \nx     \n── + x\n2     \n 3    2    \nx    x     \n── + ── + x\n3    2     \n 4    3    2    \nx    x    x     \n── + ── + ── + x\n4    3    2     \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 4 tests in 0.031s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol\n",
    "from sympy import factor, expand, simplify\n",
    "\n",
    "\n",
    "class TestSymPy(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x * x + x * y + x * y + y * y\n",
    "        self.assertEqual(expr.subs({x: 1, y: 2}), 9)\n",
    "\n",
    "    def test_02(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x * x + x * y + x * y + y * y\n",
    "        self.assertEqual(expr.subs({x: 1 - y}), y ** 2 + 2 * y * (-y + 1) + (-y + 1) ** 2)\n",
    "\n",
    "    def test_03(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x * x + x * y + x * y + y * y\n",
    "        expr_subs = expr.subs({x: 1 - y})\n",
    "        self.assertEqual(simplify(expr_subs), 1)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 級数の値を計算する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5    4    3    2    \nx    x    x    x     \n── + ── + ── + ── + x\n5    4    3    2     \nValue of the series at 12: 278052/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 4 tests in 0.015s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, pprint, init_printing\n",
    "\n",
    "\n",
    "def print_series(n, x_value):\n",
    "    # 出力を逆順に初期化\n",
    "    init_printing(order='rev-lex')\n",
    "    x = Symbol('x')\n",
    "    series = x\n",
    "    for i in range(2, n+1):\n",
    "        series = series + (x**i)/i\n",
    "    pprint(series)\n",
    "\n",
    "    # x_valueで級数評価\n",
    "    series_value = series.subs({x:x_value})\n",
    "    print('Value of the series at {0}: {1}'.format(x_value, series_value))\n",
    "    return series_value\n",
    "\n",
    "\n",
    "class TestPrintSeries(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        self.assertEqual(print_series(5,12), 278052/5)\n",
    "        \n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 文字列を数式に変換する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 数式乗算器"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5    4    3    2    \nx    x    x    x     \n── + ── + ── + ── + x\n5    4    3    2     \nValue of the series at 12: 278052/5\nx**5 + 3*x**4 + 4*x**3 + 12*x**2\nx**3*y + x**3 + x*y**2 + x*y\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 6 tests in 0.020s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, expand, sympify\n",
    "from sympy.core.sympify import SympifyError\n",
    "\n",
    "'''\n",
    "２式の積\n",
    "'''\n",
    "def product(expr1, expr2):\n",
    "    try:\n",
    "        expr1 = sympify(expr1)\n",
    "        expr2 = sympify(expr2)\n",
    "    except SympifyError:\n",
    "        print('Invalid input')\n",
    "    else:\n",
    "        prod = expand(expr1 * expr2)\n",
    "        print(prod)\n",
    "        return prod\n",
    "\n",
    "\n",
    "class TestProduct(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        expr1 = x ** 2 + x * 2 + x\n",
    "        expr2 = x ** 3 + x * 3 + x\n",
    "        self.assertEqual(product(expr1, expr2), x ** 5 + 3 * x ** 4 + 4 * x ** 3 + 12 * x ** 2)\n",
    "        \n",
    "    def test_02(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr1 = x*y+x\n",
    "        expr2 = x*x+y\n",
    "        self.assertEqual(product(expr1, expr2), x**3*y + x**3 + x*y**2 + x*y)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 方程式を解く"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5    4    3    2    \nx    x    x    x     \n── + ── + ── + ── + x\n5    4    3    2     \nValue of the series at 12: 278052/5\nx**5 + 3*x**4 + 4*x**3 + 12*x**2\nx**3*y + x**3 + x*y**2 + x*y\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 4 tests in 0.012s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, solve\n",
    "\n",
    "class TestSolve(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        expr = x - 5 - 7\n",
    "        self.assertEqual(solve(expr), [12])\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2次方程式を解く"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$x^2 + 5^x + 4$ \n",
    "\n",
    "$x^2 + x + 1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5    4    3    2    \nx    x    x    x     \n── + ── + ── + ── + x\n5    4    3    2     \nValue of the series at 12: 278052/5\nx**5 + 3*x**4 + 4*x**3 + 12*x**2\nx**3*y + x**3 + x*y**2 + x*y\n⎡⎧     1   √3⋅ⅈ⎫  ⎧     1   √3⋅ⅈ⎫⎤\n⎢⎨x: - ─ - ────⎬, ⎨x: - ─ + ────⎬⎥\n⎣⎩     2    2  ⎭  ⎩     2    2  ⎭⎦\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 5 tests in 0.080s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, solve, pprint\n",
    "\n",
    "\n",
    "class TestSolve(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        expr = x ** 2 + 5 * x + 4\n",
    "        self.assertEqual(solve(expr), [-4, -1])\n",
    "        self.assertEqual(solve(expr, dict=True), [{x: -4}, {x: -1}])\n",
    "        \n",
    "    def test_02(self):\n",
    "        x = Symbol('x')\n",
    "        expr = x**2 + x + 1\n",
    "        pprint(solve(expr, dict=True))\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### １変数を他の変数について解く"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$s = ut + \\frac{1}{2}att$ \n",
    "\n",
    "$t:\\frac{1}{a}(-u+\\sqrt{2.0as + u^2})$ \n",
    "\n",
    "$t:-\\frac{1}{a}(-u+\\sqrt{2.0as + u^2})$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "⎡⎧           ______________⎫  ⎧    ⎛       ______________⎞ ⎫⎤\n⎢⎪          ╱            2 ⎪  ⎪    ⎜      ╱            2 ⎟ ⎪⎥\n⎢⎨   -u + ╲╱  2.0⋅a⋅s + u  ⎬  ⎨   -⎝u + ╲╱  2.0⋅a⋅s + u  ⎠ ⎬⎥\n⎢⎪t: ──────────────────────⎪, ⎪t: ─────────────────────────⎪⎥\n⎣⎩             a           ⎭  ⎩               a            ⎭⎦\n"
     ]
    }
   ],
   "source": [
    "from sympy import Symbol, solve, pprint\n",
    "\n",
    "s = Symbol('s')\n",
    "u = Symbol('u')\n",
    "t = Symbol('t')\n",
    "a = Symbol('a')\n",
    "expr = u*t + (1/2)*a*t*t - s\n",
    "t_expr = solve(expr, t, dict=True)\n",
    "pprint(t_expr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 連立方程式を解く"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$2x + 3y = 6$ \n",
    "\n",
    "$3x + 2y = 12$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{x: 24/5, y: -6/5}]\n0\n0\n"
     ]
    }
   ],
   "source": [
    "from sympy import Symbol, solve, pprint\n",
    "\n",
    "x = Symbol('x')\n",
    "y = Symbol('y')\n",
    "expr1 = 2 * x + 3 * y - 6\n",
    "expr2 = 3 * x + 2 * y - 12\n",
    "soln = solve((expr1, expr2), dict=True)\n",
    "print(soln)\n",
    "soln = soln[0]\n",
    "expr1 = expr1.subs({x: soln[x], y: soln[y]})\n",
    "print(expr1)\n",
    "expr2 = expr2.subs({x: soln[x], y: soln[y]})\n",
    "print(expr2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SymPyを使ってプロットする"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$y = 2x+3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sympy.plotting.plot.Plot at 0x118e49b70>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sympy.plotting import plot\n",
    "from sympy import Symbol\n",
    "\n",
    "x = Symbol('x')\n",
    "plot(2*x*3)\n",
    "plot((2*x + 3),(x, -5, 5))\n",
    "plot(2*x + 3,(x, -5, 5), title='A Line', xlabel='x', ylabel='2x+3')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ユーザが入力した式をプロットする"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'sympy'",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-dda691141808>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msympy\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msympify\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msolve\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msympy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplotting\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mplot_expression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSymbol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'sympy'"
     ],
     "output_type": "error"
    }
   ],
   "source": [
    "from sympy import Symbol, sympify, solve\n",
    "from sympy.plotting import plot\n",
    "\n",
    "def plot_expression(expr):\n",
    "    y = Symbol('y')\n",
    "    solutions = solve(expr, y)\n",
    "    expr_y = solutions[0]\n",
    "    plot(expr_y)\n",
    "    \n",
    "    \n",
    "if __name__ == '__main__':\n",
    "    \n",
    "    expr = input('Enter your expression in terms of x and y: ')\n",
    "    try:\n",
    "        expr = sympify(expr)\n",
    "    except SympifyError:\n",
    "        print('Invalid input')\n",
    "    else:\n",
    "        plot_expression(expr)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 複数の関数をプロットする"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$y=2x+3$ \n",
    "\n",
    "$y=3x+1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<sympy.plotting.plot.Plot at 0x121883898>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sympy.plotting import plot\n",
    "from sympy import Symbol\n",
    "x = Symbol('x')\n",
    "plot(2*x+3, 3*x+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy.plotting import plot\n",
    "from sympy import Symbol\n",
    "x = Symbol('x')\n",
    "p = plot(2*x+3, 3*x+1, lengend=True, show=False)\n",
    "p[0].line_color = 'b'\n",
    "p[1].line_color = 'r'\n",
    "p.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
