{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# SymPyで代数と式を計算する\n",
    "## 式の記号と記号演算を定義する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$2x + 1$\n",
    "\n",
    "$2xy$\n",
    "\n",
    "$2x^2$ \n",
    "\n",
    "$(x+2)(y+3)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting sympy\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/dd/f6/ed485ff22efdd7b371d0dbbf6d77ad61c3b3b7e0815a83c89cbb38ce35de/sympy-1.3.tar.gz (5.9MB)\r\n\r\u001b[K    0% |                                | 10kB 727kB/s eta 0:00:09\r\u001b[K    0% |▏                               | 20kB 1.1MB/s eta 0:00:06\r\u001b[K    0% |▏                               | 30kB 1.6MB/s eta 0:00:04\r\u001b[K    0% |▎                               | 40kB 1.4MB/s eta 0:00:05\r\u001b[K    0% |▎                               | 51kB 1.5MB/s eta 0:00:04\r\u001b[K    1% |▍                               | 61kB 1.8MB/s eta 0:00:04\r\u001b[K    1% |▍                               | 71kB 2.0MB/s eta 0:00:03\r\u001b[K    1% |▌                               | 81kB 2.3MB/s eta 0:00:03\r\u001b[K    1% |▌                               | 92kB 2.2MB/s eta 0:00:03\r\u001b[K    1% |▋                               | 102kB 2.4MB/s eta 0:00:03\r\u001b[K    1% |▋                               | 112kB 3.5MB/s eta 0:00:02\r\u001b[K    2% |▊                               | 122kB 3.8MB/s eta 0:00:02\r\u001b[K    2% |▊                               | 133kB 3.5MB/s eta 0:00:02\r\u001b[K    2% |▉                               | 143kB 5.2MB/s eta 0:00:02"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    2% |▉                               | 153kB 6.9MB/s eta 0:00:01\r\u001b[K    2% |█                               | 163kB 6.9MB/s eta 0:00:01\r\u001b[K    2% |█                               | 174kB 5.3MB/s eta 0:00:02\r\u001b[K    3% |█                               | 184kB 5.3MB/s eta 0:00:02\r\u001b[K    3% |█                               | 194kB 8.1MB/s eta 0:00:01\r\u001b[K    3% |█▏                              | 204kB 8.1MB/s eta 0:00:01\r\u001b[K    3% |█▏                              | 215kB 6.5MB/s eta 0:00:01\r\u001b[K    3% |█▎                              | 225kB 7.4MB/s eta 0:00:01\r\u001b[K    4% |█▎                              | 235kB 8.1MB/s eta 0:00:01\r\u001b[K    4% |█▍                              | 245kB 8.1MB/s eta 0:00:01\r\u001b[K    4% |█▍                              | 256kB 6.2MB/s eta 0:00:01\r\u001b[K    4% |█▌                              | 266kB 5.9MB/s eta 0:00:01\r\u001b[K    4% |█▌                              | 276kB 8.2MB/s eta 0:00:01\r\u001b[K    4% |█▋                              | 286kB 7.3MB/s eta 0:00:01\r\u001b[K    5% |█▋                              | 296kB 5.6MB/s eta 0:00:02\r\u001b[K    5% |█▊                              | 307kB 5.9MB/s eta 0:00:01\r\u001b[K    5% |█▊                              | 317kB 6.5MB/s eta 0:00:01\r\u001b[K    5% |█▉                              | 327kB 6.5MB/s eta 0:00:01\r\u001b[K    5% |█▉                              | 337kB 6.8MB/s eta 0:00:01\r\u001b[K    5% |██                              | 348kB 6.2MB/s eta 0:00:01\r\u001b[K    6% |██                              | 358kB 8.8MB/s eta 0:00:01\r\u001b[K    6% |██                              | 368kB 8.9MB/s eta 0:00:01\r\u001b[K    6% |██                              | 378kB 8.1MB/s eta 0:00:01\r\u001b[K    6% |██▏                             | 389kB 9.3MB/s eta 0:00:01\r\u001b[K    6% |██▏                             | 399kB 14.0MB/s eta 0:00:01\r\u001b[K    6% |██▎                             | 409kB 14.0MB/s eta 0:00:01\r\u001b[K    7% |██▎                             | 419kB 13.3MB/s eta 0:00:01\r\u001b[K    7% |██▍                             | 430kB 11.7MB/s eta 0:00:01\r\u001b[K    7% |██▍                             | 440kB 12.7MB/s eta 0:00:01\r\u001b[K    7% |██▌                             | 450kB 14.1MB/s eta 0:00:01\r\u001b[K    7% |██▌                             | 460kB 11.0MB/s eta 0:00:01\r\u001b[K    8% |██▋                             | 471kB 11.8MB/s eta 0:00:01\r\u001b[K    8% |██▋                             | 481kB 10.1MB/s eta 0:00:01\r\u001b[K    8% |██▊                             | 491kB 10.1MB/s eta 0:00:01\r\u001b[K    8% |██▊                             | 501kB 9.5MB/s eta 0:00:01\r\u001b[K    8% |██▉                             | 512kB 7.1MB/s eta 0:00:01\r\u001b[K    8% |██▉                             | 522kB 8.1MB/s eta 0:00:01\r\u001b[K    9% |███                             | 532kB 7.4MB/s eta 0:00:01\r\u001b[K    9% |███                             | 542kB 6.6MB/s eta 0:00:01\r\u001b[K    9% |███                             | 552kB 7.0MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    9% |███                             | 563kB 7.4MB/s eta 0:00:01\r\u001b[K    9% |███▏                            | 573kB 7.4MB/s eta 0:00:01\r\u001b[K    9% |███▏                            | 583kB 8.6MB/s eta 0:00:01\r\u001b[K    10% |███▎                            | 593kB 4.7MB/s eta 0:00:02\r\u001b[K    10% |███▎                            | 604kB 4.9MB/s eta 0:00:02\r\u001b[K    10% |███▍                            | 614kB 5.8MB/s eta 0:00:01\r\u001b[K    10% |███▍                            | 624kB 5.3MB/s eta 0:00:01\r\u001b[K    10% |███▌                            | 634kB 6.0MB/s eta 0:00:01\r\u001b[K    10% |███▌                            | 645kB 6.4MB/s eta 0:00:01\r\u001b[K    11% |███▋                            | 655kB 6.4MB/s eta 0:00:01\r\u001b[K    11% |███▋                            | 665kB 6.1MB/s eta 0:00:01\r\u001b[K    11% |███▊                            | 675kB 5.9MB/s eta 0:00:01\r\u001b[K    11% |███▊                            | 686kB 6.2MB/s eta 0:00:01\r\u001b[K    11% |███▉                            | 696kB 14.3MB/s eta 0:00:01\r\u001b[K    12% |███▉                            | 706kB 11.9MB/s eta 0:00:01\r\u001b[K    12% |████                            | 716kB 12.8MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    12% |████                            | 727kB 2.3MB/s eta 0:00:03\r\u001b[K    12% |████                            | 737kB 2.3MB/s eta 0:00:03\r\u001b[K    12% |████                            | 747kB 1.9MB/s eta 0:00:03\r\u001b[K    12% |████▏                           | 757kB 1.5MB/s eta 0:00:04\r\u001b[K    13% |████▏                           | 768kB 1.5MB/s eta 0:00:04\r\u001b[K    13% |████▎                           | 778kB 1.5MB/s eta 0:00:04\r\u001b[K    13% |████▎                           | 788kB 1.5MB/s eta 0:00:04\r\u001b[K    13% |████▍                           | 798kB 1.5MB/s eta 0:00:04\r\u001b[K    13% |████▍                           | 808kB 1.5MB/s eta 0:00:04\r\u001b[K    13% |████▌                           | 819kB 1.5MB/s eta 0:00:04\r\u001b[K    14% |████▌                           | 829kB 3.3MB/s eta 0:00:02\r\u001b[K    14% |████▋                           | 839kB 3.3MB/s eta 0:00:02\r\u001b[K    14% |████▋                           | 849kB 4.8MB/s eta 0:00:02\r\u001b[K    14% |████▊                           | 860kB 20.0MB/s eta 0:00:01\r\u001b[K    14% |████▊                           | 870kB 20.1MB/s eta 0:00:01\r\u001b[K    14% |████▉                           | 880kB 28.4MB/s eta 0:00:01\r\u001b[K    15% |████▉                           | 890kB 46.4MB/s eta 0:00:01\r\u001b[K    15% |█████                           | 901kB 47.0MB/s eta 0:00:01\r\u001b[K    15% |█████                           | 911kB 54.2MB/s eta 0:00:01\r\u001b[K    15% |█████                           | 921kB 54.2MB/s eta 0:00:01\r\u001b[K    15% |█████                           | 931kB 87.4MB/s eta 0:00:01\r\u001b[K    16% |█████▏                          | 942kB 91.8MB/s eta 0:00:01\r\u001b[K    16% |█████▏                          | 952kB 91.0MB/s eta 0:00:01\r\u001b[K    16% |█████▎                          | 962kB 94.7MB/s eta 0:00:01\r\u001b[K    16% |█████▎                          | 972kB 91.7MB/s eta 0:00:01\r\u001b[K    16% |█████▍                          | 983kB 91.8MB/s eta 0:00:01\r\u001b[K    16% |█████▍                          | 993kB 91.8MB/s eta 0:00:01\r\u001b[K    17% |█████▌                          | 1.0MB 90.2MB/s eta 0:00:01\r\u001b[K    17% |█████▌                          | 1.0MB 91.5MB/s eta 0:00:01\r\u001b[K    17% |█████▋                          | 1.0MB 91.8MB/s eta 0:00:01\r\u001b[K    17% |█████▋                          | 1.0MB 90.0MB/s eta 0:00:01\r\u001b[K    17% |█████▊                          | 1.0MB 91.5MB/s eta 0:00:01\r\u001b[K    17% |█████▊                          | 1.1MB 91.8MB/s eta 0:00:01\r\u001b[K    18% |█████▉                          | 1.1MB 91.8MB/s eta 0:00:01\r\u001b[K    18% |█████▉                          | 1.1MB 96.7MB/s eta 0:00:01\r\u001b[K    18% |██████                          | 1.1MB 95.0MB/s eta 0:00:01\r\u001b[K    18% |██████                          | 1.1MB 96.3MB/s eta 0:00:01\r\u001b[K    18% |██████                          | 1.1MB 96.7MB/s eta 0:00:01\r\u001b[K    18% |██████                          | 1.1MB 14.0MB/s eta 0:00:01\r\u001b[K    19% |██████▏                         | 1.1MB 13.9MB/s eta 0:00:01\r\u001b[K    19% |██████▏                         | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K    19% |██████▎                         | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K    19% |██████▎                         | 1.2MB 11.0MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    19% |██████▍                         | 1.2MB 8.9MB/s eta 0:00:01\r\u001b[K    20% |██████▍                         | 1.2MB 8.9MB/s eta 0:00:01\r\u001b[K    20% |██████▌                         | 1.2MB 4.8MB/s eta 0:00:01\r\u001b[K    20% |██████▌                         | 1.2MB 4.6MB/s eta 0:00:02\r\u001b[K    20% |██████▋                         | 1.2MB 4.6MB/s eta 0:00:02\r\u001b[K    20% |██████▋                         | 1.2MB 5.1MB/s eta 0:00:01\r\u001b[K    20% |██████▊                         | 1.2MB 5.1MB/s eta 0:00:01\r\u001b[K    21% |██████▊                         | 1.2MB 5.0MB/s eta 0:00:01\r\u001b[K    21% |██████▉                         | 1.2MB 4.2MB/s eta 0:00:02\r\u001b[K    21% |██████▉                         | 1.3MB 4.4MB/s eta 0:00:02\r\u001b[K    21% |███████                         | 1.3MB 4.7MB/s eta 0:00:01\r\u001b[K    21% |███████                         | 1.3MB 4.4MB/s eta 0:00:02\r\u001b[K    21% |███████                         | 1.3MB 7.7MB/s eta 0:00:01\r\u001b[K    22% |███████                         | 1.3MB 7.4MB/s eta 0:00:01\r\u001b[K    22% |███████▏                        | 1.3MB 7.4MB/s eta 0:00:01\r\u001b[K    22% |███████▏                        | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K    22% |███████▎                        | 1.3MB 7.3MB/s eta 0:00:01\r\u001b[K    22% |███████▎                        | 1.3MB 8.0MB/s eta 0:00:01\r\u001b[K    22% |███████▍                        | 1.4MB 10.0MB/s eta 0:00:01\r\u001b[K    23% |███████▍                        | 1.4MB 9.2MB/s eta 0:00:01\r\u001b[K    23% |███████▌                        | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K    23% |███████▌                        | 1.4MB 10.1MB/s eta 0:00:01\r\u001b[K    23% |███████▋                        | 1.4MB 10.1MB/s eta 0:00:01\r\u001b[K    23% |███████▋                        | 1.4MB 10.8MB/s eta 0:00:01\r\u001b[K    24% |███████▊                        | 1.4MB 8.7MB/s eta 0:00:01\r\u001b[K    24% |███████▊                        | 1.4MB 9.1MB/s eta 0:00:01\r\u001b[K    24% |███████▉                        | 1.4MB 12.0MB/s eta 0:00:01\r\u001b[K    24% |███████▉                        | 1.4MB 9.4MB/s eta 0:00:01\r\u001b[K    24% |████████                        | 1.5MB 10.6MB/s eta 0:00:01\r\u001b[K    24% |████████                        | 1.5MB 10.6MB/s eta 0:00:01\r\u001b[K    25% |████████                        | 1.5MB 10.6MB/s eta 0:00:01\r\u001b[K    25% |████████                        | 1.5MB 11.0MB/s eta 0:00:01\r\u001b[K    25% |████████▏                       | 1.5MB 9.4MB/s eta 0:00:01\r\u001b[K    25% |████████▏                       | 1.5MB 10.0MB/s eta 0:00:01\r\u001b[K    25% |████████▎                       | 1.5MB 12.1MB/s eta 0:00:01\r\u001b[K    25% |████████▎                       | 1.5MB 8.3MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    26% |████████▍                       | 1.5MB 8.6MB/s eta 0:00:01\r\u001b[K    26% |████████▍                       | 1.5MB 10.2MB/s eta 0:00:01\r\u001b[K    26% |████████▌                       | 1.6MB 10.3MB/s eta 0:00:01\r\u001b[K    26% |████████▌                       | 1.6MB 9.1MB/s eta 0:00:01\r\u001b[K    26% |████████▋                       | 1.6MB 8.0MB/s eta 0:00:01\r\u001b[K    26% |████████▋                       | 1.6MB 8.3MB/s eta 0:00:01\r\u001b[K    27% |████████▊                       | 1.6MB 9.1MB/s eta 0:00:01\r\u001b[K    27% |████████▊                       | 1.6MB 7.7MB/s eta 0:00:01\r\u001b[K    27% |████████▉                       | 1.6MB 8.0MB/s eta 0:00:01\r\u001b[K    27% |████████▉                       | 1.6MB 10.8MB/s eta 0:00:01\r\u001b[K    27% |█████████                       | 1.6MB 10.9MB/s eta 0:00:01\r\u001b[K    28% |█████████                       | 1.6MB 10.1MB/s eta 0:00:01\r\u001b[K    28% |█████████                       | 1.7MB 6.1MB/s eta 0:00:01\r\u001b[K    28% |█████████                       | 1.7MB 7.1MB/s eta 0:00:01\r\u001b[K    28% |█████████▏                      | 1.7MB 7.6MB/s eta 0:00:01\r\u001b[K    28% |█████████▏                      | 1.7MB 6.9MB/s eta 0:00:01\r\u001b[K    28% |█████████▎                      | 1.7MB 7.2MB/s eta 0:00:01\r\u001b[K    29% |█████████▎                      | 1.7MB 7.9MB/s eta 0:00:01\r\u001b[K    29% |█████████▍                      | 1.7MB 7.9MB/s eta 0:00:01\r\u001b[K    29% |█████████▍                      | 1.7MB 7.6MB/s eta 0:00:01\r\u001b[K    29% |█████████▌                      | 1.7MB 7.2MB/s eta 0:00:01\r\u001b[K    29% |█████████▌                      | 1.8MB 7.9MB/s eta 0:00:01\r\u001b[K    29% |█████████▋                      | 1.8MB 12.1MB/s eta 0:00:01\r\u001b[K    30% |█████████▋                      | 1.8MB 10.6MB/s eta 0:00:01\r\u001b[K    30% |█████████▊                      | 1.8MB 11.0MB/s eta 0:00:01\r\u001b[K    30% |█████████▊                      | 1.8MB 12.0MB/s eta 0:00:01\r\u001b[K    30% |█████████▉                      | 1.8MB 12.0MB/s eta 0:00:01\r\u001b[K    30% |█████████▉                      | 1.8MB 11.0MB/s eta 0:00:01\r\u001b[K    30% |██████████                      | 1.8MB 10.1MB/s eta 0:00:01\r\u001b[K    31% |██████████                      | 1.8MB 11.4MB/s eta 0:00:01\r\u001b[K    31% |██████████                      | 1.8MB 11.3MB/s eta 0:00:01\r\u001b[K    31% |██████████                      | 1.9MB 10.4MB/s eta 0:00:01\r\u001b[K    31% |██████████▏                     | 1.9MB 13.1MB/s eta 0:00:01\r\u001b[K    31% |██████████▏                     | 1.9MB 13.1MB/s eta 0:00:01\r\u001b[K    32% |██████████▎                     | 1.9MB 13.1MB/s eta 0:00:01\r\u001b[K    32% |██████████▎                     | 1.9MB 11.9MB/s eta 0:00:01\r\u001b[K    32% |██████████▍                     | 1.9MB 11.1MB/s eta 0:00:01\r\u001b[K    32% |██████████▍                     | 1.9MB 13.2MB/s eta 0:00:01\r\u001b[K    32% |██████████▌                     | 1.9MB 9.9MB/s eta 0:00:01\r\u001b[K    32% |██████████▌                     | 1.9MB 9.3MB/s eta 0:00:01\r\u001b[K    33% |██████████▋                     | 1.9MB 10.1MB/s eta 0:00:01\r\u001b[K    33% |██████████▋                     | 2.0MB 8.4MB/s eta 0:00:01\r\u001b[K    33% |██████████▊                     | 2.0MB 8.4MB/s eta 0:00:01\r\u001b[K    33% |██████████▊                     | 2.0MB 8.8MB/s eta 0:00:01\r\u001b[K    33% |██████████▉                     | 2.0MB 7.8MB/s eta 0:00:01\r\u001b[K    33% |██████████▉                     | 2.0MB 8.7MB/s eta 0:00:01\r\u001b[K    34% |███████████                     | 2.0MB 8.3MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    34% |███████████                     | 2.0MB 7.8MB/s eta 0:00:01\r\u001b[K    34% |███████████                     | 2.0MB 10.2MB/s eta 0:00:01\r\u001b[K    34% |███████████                     | 2.0MB 10.3MB/s eta 0:00:01\r\u001b[K    34% |███████████▏                    | 2.0MB 10.2MB/s eta 0:00:01\r\u001b[K    34% |███████████▏                    | 2.1MB 13.3MB/s eta 0:00:01\r\u001b[K    35% |███████████▎                    | 2.1MB 8.3MB/s eta 0:00:01\r\u001b[K    35% |███████████▎                    | 2.1MB 8.8MB/s eta 0:00:01\r\u001b[K    35% |███████████▍                    | 2.1MB 9.6MB/s eta 0:00:01\r\u001b[K    35% |███████████▍                    | 2.1MB 6.6MB/s eta 0:00:01\r\u001b[K    35% |███████████▌                    | 2.1MB 7.2MB/s eta 0:00:01\r\u001b[K    36% |███████████▌                    | 2.1MB 6.5MB/s eta 0:00:01\r\u001b[K    36% |███████████▋                    | 2.1MB 6.5MB/s eta 0:00:01\r\u001b[K    36% |███████████▋                    | 2.1MB 6.6MB/s eta 0:00:01\r\u001b[K    36% |███████████▊                    | 2.2MB 6.1MB/s eta 0:00:01\r\u001b[K    36% |███████████▊                    | 2.2MB 6.3MB/s eta 0:00:01\r\u001b[K    36% |███████████▉                    | 2.2MB 8.4MB/s eta 0:00:01\r\u001b[K    37% |███████████▉                    | 2.2MB 5.1MB/s eta 0:00:01\r\u001b[K    37% |████████████                    | 2.2MB 5.2MB/s eta 0:00:01\r\u001b[K    37% |████████████                    | 2.2MB 6.6MB/s eta 0:00:01\r\u001b[K    37% |████████████                    | 2.2MB 6.6MB/s eta 0:00:01\r\u001b[K    37% |████████████                    | 2.2MB 7.5MB/s eta 0:00:01\r\u001b[K    37% |████████████▏                   | 2.2MB 6.9MB/s eta 0:00:01\r\u001b[K    38% |████████████▏                   | 2.2MB 7.1MB/s eta 0:00:01\r\u001b[K    38% |████████████▎                   | 2.3MB 7.5MB/s eta 0:00:01\r\u001b[K    38% |████████████▎                   | 2.3MB 6.8MB/s eta 0:00:01\r\u001b[K    38% |████████████▍                   | 2.3MB 7.1MB/s eta 0:00:01\r\u001b[K    38% |████████████▍                   | 2.3MB 14.3MB/s eta 0:00:01\r\u001b[K    38% |████████████▌                   | 2.3MB 14.3MB/s eta 0:00:01\r\u001b[K    39% |████████████▌                   | 2.3MB 13.5MB/s eta 0:00:01\r\u001b[K    39% |████████████▋                   | 2.3MB 11.2MB/s eta 0:00:01\r\u001b[K    39% |████████████▋                   | 2.3MB 12.0MB/s eta 0:00:01\r\u001b[K    39% |████████████▊                   | 2.3MB 13.1MB/s eta 0:00:01\r\u001b[K    39% |████████████▊                   | 2.3MB 10.6MB/s eta 0:00:01\r\u001b[K    40% |████████████▉                   | 2.4MB 11.4MB/s eta 0:00:01\r\u001b[K    40% |████████████▉                   | 2.4MB 12.5MB/s eta 0:00:01\r\u001b[K    40% |█████████████                   | 2.4MB 12.5MB/s eta 0:00:01\r\u001b[K    40% |█████████████                   | 2.4MB 12.1MB/s eta 0:00:01\r\u001b[K    40% |█████████████                   | 2.4MB 11.0MB/s eta 0:00:01\r\u001b[K    40% |█████████████                   | 2.4MB 12.8MB/s eta 0:00:01\r\u001b[K    41% |█████████████▏                  | 2.4MB 13.3MB/s eta 0:00:01\r\u001b[K    41% |█████████████▏                  | 2.4MB 11.3MB/s eta 0:00:01\r\u001b[K    41% |█████████████▎                  | 2.4MB 12.0MB/s eta 0:00:01\r\u001b[K    41% |█████████████▎                  | 2.4MB 12.4MB/s eta 0:00:01\r\u001b[K    41% |█████████████▍                  | 2.5MB 12.4MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    41% |█████████████▍                  | 2.5MB 10.9MB/s eta 0:00:01\r\u001b[K    42% |█████████████▌                  | 2.5MB 9.9MB/s eta 0:00:01\r\u001b[K    42% |█████████████▌                  | 2.5MB 11.0MB/s eta 0:00:01\r\u001b[K    42% |█████████████▋                  | 2.5MB 10.1MB/s eta 0:00:01\r\u001b[K    42% |█████████████▋                  | 2.5MB 9.3MB/s eta 0:00:01\r\u001b[K    42% |█████████████▊                  | 2.5MB 10.5MB/s eta 0:00:01\r\u001b[K    42% |█████████████▊                  | 2.5MB 10.6MB/s eta 0:00:01\r\u001b[K    43% |█████████████▉                  | 2.5MB 10.5MB/s eta 0:00:01\r\u001b[K    43% |█████████████▉                  | 2.5MB 7.7MB/s eta 0:00:01\r\u001b[K    43% |██████████████                  | 2.6MB 7.2MB/s eta 0:00:01\r\u001b[K    43% |██████████████                  | 2.6MB 8.2MB/s eta 0:00:01\r\u001b[K    43% |██████████████                  | 2.6MB 6.4MB/s eta 0:00:01\r\u001b[K    44% |██████████████                  | 2.6MB 6.1MB/s eta 0:00:01\r\u001b[K    44% |██████████████▏                 | 2.6MB 6.7MB/s eta 0:00:01\r\u001b[K    44% |██████████████▏                 | 2.6MB 6.1MB/s eta 0:00:01\r\u001b[K    44% |██████████████▎                 | 2.6MB 6.1MB/s eta 0:00:01\r\u001b[K    44% |██████████████▎                 | 2.6MB 5.7MB/s eta 0:00:01\r\u001b[K    44% |██████████████▍                 | 2.6MB 5.5MB/s eta 0:00:01\r\u001b[K    45% |██████████████▍                 | 2.7MB 7.7MB/s eta 0:00:01\r\u001b[K    45% |██████████████▌                 | 2.7MB 7.6MB/s eta 0:00:01\r\u001b[K    45% |██████████████▌                 | 2.7MB 7.2MB/s eta 0:00:01\r\u001b[K    45% |██████████████▋                 | 2.7MB 10.5MB/s eta 0:00:01\r\u001b[K    45% |██████████████▋                 | 2.7MB 10.0MB/s eta 0:00:01\r\u001b[K    45% |██████████████▊                 | 2.7MB 10.0MB/s eta 0:00:01\r\u001b[K    46% |██████████████▊                 | 2.7MB 11.9MB/s eta 0:00:01\r\u001b[K    46% |██████████████▉                 | 2.7MB 9.8MB/s eta 0:00:01\r\u001b[K    46% |██████████████▉                 | 2.7MB 12.9MB/s eta 0:00:01\r\u001b[K    46% |███████████████                 | 2.7MB 12.8MB/s eta 0:00:01\r\u001b[K    46% |███████████████                 | 2.8MB 11.6MB/s eta 0:00:01\r\u001b[K    46% |███████████████                 | 2.8MB 13.3MB/s eta 0:00:01\r\u001b[K    47% |███████████████                 | 2.8MB 8.3MB/s eta 0:00:01\r\u001b[K    47% |███████████████▏                | 2.8MB 8.3MB/s eta 0:00:01\r\u001b[K    47% |███████████████▏                | 2.8MB 9.3MB/s eta 0:00:01\r\u001b[K    47% |███████████████▎                | 2.8MB 8.8MB/s eta 0:00:01\r\u001b[K    47% |███████████████▎                | 2.8MB 9.3MB/s eta 0:00:01\r\u001b[K    48% |███████████████▍                | 2.8MB 8.6MB/s eta 0:00:01\r\u001b[K    48% |███████████████▍                | 2.8MB 8.0MB/s eta 0:00:01\r\u001b[K    48% |███████████████▌                | 2.8MB 8.6MB/s eta 0:00:01\r\u001b[K    48% |███████████████▌                | 2.9MB 7.1MB/s eta 0:00:01\r\u001b[K    48% |███████████████▋                | 2.9MB 7.1MB/s eta 0:00:01\r\u001b[K    48% |███████████████▋                | 2.9MB 9.6MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    49% |███████████████▊                | 2.9MB 8.8MB/s eta 0:00:01\r\u001b[K    49% |███████████████▊                | 2.9MB 8.8MB/s eta 0:00:01\r\u001b[K    49% |███████████████▉                | 2.9MB 8.4MB/s eta 0:00:01\r\u001b[K    49% |███████████████▉                | 2.9MB 7.8MB/s eta 0:00:01\r\u001b[K    49% |████████████████                | 2.9MB 9.9MB/s eta 0:00:01\r\u001b[K    49% |████████████████                | 2.9MB 5.5MB/s eta 0:00:01\r\u001b[K    50% |████████████████                | 2.9MB 5.5MB/s eta 0:00:01\r\u001b[K    50% |████████████████                | 3.0MB 5.4MB/s eta 0:00:01\r\u001b[K    50% |████████████████▏               | 3.0MB 5.1MB/s eta 0:00:01\r\u001b[K    50% |████████████████▏               | 3.0MB 5.6MB/s eta 0:00:01\r\u001b[K    50% |████████████████▎               | 3.0MB 5.8MB/s eta 0:00:01\r\u001b[K    50% |████████████████▎               | 3.0MB 5.6MB/s eta 0:00:01\r\u001b[K    51% |████████████████▍               | 3.0MB 6.0MB/s eta 0:00:01\r\u001b[K    51% |████████████████▍               | 3.0MB 6.1MB/s eta 0:00:01\r\u001b[K    51% |████████████████▌               | 3.0MB 6.2MB/s eta 0:00:01\r\u001b[K    51% |████████████████▌               | 3.0MB 6.3MB/s eta 0:00:01\r\u001b[K    51% |████████████████▋               | 3.1MB 6.0MB/s eta 0:00:01\r\u001b[K    52% |████████████████▋               | 3.1MB 7.6MB/s eta 0:00:01\r\u001b[K    52% |████████████████▊               | 3.1MB 7.5MB/s eta 0:00:01\r\u001b[K    52% |████████████████▊               | 3.1MB 7.1MB/s eta 0:00:01\r\u001b[K    52% |████████████████▉               | 3.1MB 7.1MB/s eta 0:00:01\r\u001b[K    52% |████████████████▉               | 3.1MB 6.4MB/s eta 0:00:01\r\u001b[K    52% |█████████████████               | 3.1MB 6.4MB/s eta 0:00:01\r\u001b[K    53% |█████████████████               | 3.1MB 6.2MB/s eta 0:00:01\r\u001b[K    53% |█████████████████               | 3.1MB 5.9MB/s eta 0:00:01\r\u001b[K    53% |█████████████████               | 3.1MB 11.8MB/s eta 0:00:01\r\u001b[K    53% |█████████████████▏              | 3.2MB 10.1MB/s eta 0:00:01\r\u001b[K    53% |█████████████████▏              | 3.2MB 9.3MB/s eta 0:00:01\r\u001b[K    53% |█████████████████▎              | 3.2MB 10.7MB/s eta 0:00:01\r\u001b[K    54% |█████████████████▎              | 3.2MB 10.1MB/s eta 0:00:01\r\u001b[K    54% |█████████████████▍              | 3.2MB 10.2MB/s eta 0:00:01\r\u001b[K    54% |█████████████████▍              | 3.2MB 11.8MB/s eta 0:00:01\r\u001b[K    54% |█████████████████▌              | 3.2MB 10.4MB/s eta 0:00:01\r\u001b[K    54% |█████████████████▌              | 3.2MB 12.0MB/s eta 0:00:01\r\u001b[K    54% |█████████████████▋              | 3.2MB 9.8MB/s eta 0:00:01\r\u001b[K    55% |█████████████████▋              | 3.2MB 9.1MB/s eta 0:00:01\r\u001b[K    55% |█████████████████▊              | 3.3MB 11.4MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    55% |█████████████████▊              | 3.3MB 10.5MB/s eta 0:00:01\r\u001b[K    55% |█████████████████▉              | 3.3MB 10.5MB/s eta 0:00:01\r\u001b[K    55% |█████████████████▉              | 3.3MB 11.1MB/s eta 0:00:01\r\u001b[K    56% |██████████████████              | 3.3MB 8.4MB/s eta 0:00:01\r\u001b[K    56% |██████████████████              | 3.3MB 8.9MB/s eta 0:00:01\r\u001b[K    56% |██████████████████              | 3.3MB 9.5MB/s eta 0:00:01\r\u001b[K    56% |██████████████████              | 3.3MB 8.0MB/s eta 0:00:01\r\u001b[K    56% |██████████████████▏             | 3.3MB 10.3MB/s eta 0:00:01\r\u001b[K    56% |██████████████████▏             | 3.3MB 9.9MB/s eta 0:00:01\r\u001b[K    57% |██████████████████▎             | 3.4MB 9.9MB/s eta 0:00:01\r\u001b[K    57% |██████████████████▎             | 3.4MB 10.8MB/s eta 0:00:01\r\u001b[K    57% |██████████████████▍             | 3.4MB 9.7MB/s eta 0:00:01\r\u001b[K    57% |██████████████████▍             | 3.4MB 10.4MB/s eta 0:00:01\r\u001b[K    57% |██████████████████▌             | 3.4MB 13.2MB/s eta 0:00:01\r\u001b[K    57% |██████████████████▌             | 3.4MB 7.0MB/s eta 0:00:01\r\u001b[K    58% |██████████████████▋             | 3.4MB 7.2MB/s eta 0:00:01\r\u001b[K    58% |██████████████████▋             | 3.4MB 8.4MB/s eta 0:00:01\r\u001b[K    58% |██████████████████▊             | 3.4MB 8.4MB/s eta 0:00:01\r\u001b[K    58% |██████████████████▊             | 3.5MB 8.7MB/s eta 0:00:01\r\u001b[K    58% |██████████████████▉             | 3.5MB 7.3MB/s eta 0:00:01\r\u001b[K    58% |██████████████████▉             | 3.5MB 7.7MB/s eta 0:00:01\r\u001b[K    59% |███████████████████             | 3.5MB 8.0MB/s eta 0:00:01\r\u001b[K    59% |███████████████████             | 3.5MB 7.1MB/s eta 0:00:01\r\u001b[K    59% |███████████████████             | 3.5MB 7.5MB/s eta 0:00:01\r\u001b[K    59% |███████████████████             | 3.5MB 12.7MB/s eta 0:00:01\r\u001b[K    59% |███████████████████▏            | 3.5MB 12.8MB/s eta 0:00:01\r\u001b[K    60% |███████████████████▏            | 3.5MB 11.9MB/s eta 0:00:01\r\u001b[K    60% |███████████████████▎            | 3.5MB 9.2MB/s eta 0:00:01\r\u001b[K    60% |███████████████████▎            | 3.6MB 9.9MB/s eta 0:00:01\r\u001b[K    60% |███████████████████▍            | 3.6MB 11.7MB/s eta 0:00:01\r\u001b[K    60% |███████████████████▍            | 3.6MB 10.2MB/s eta 0:00:01\r\u001b[K    60% |███████████████████▌            | 3.6MB 11.0MB/s eta 0:00:01\r\u001b[K    61% |███████████████████▌            | 3.6MB 9.9MB/s eta 0:00:01\r\u001b[K    61% |███████████████████▋            | 3.6MB 9.9MB/s eta 0:00:01\r\u001b[K    61% |███████████████████▋            | 3.6MB 10.6MB/s eta 0:00:01\r\u001b[K    61% |███████████████████▊            | 3.6MB 8.4MB/s eta 0:00:01\r\u001b[K    61% |███████████████████▊            | 3.6MB 8.8MB/s eta 0:00:01\r\u001b[K    61% |███████████████████▉            | 3.6MB 10.3MB/s eta 0:00:01\r\u001b[K    62% |███████████████████▉            | 3.7MB 9.0MB/s eta 0:00:01\r\u001b[K    62% |████████████████████            | 3.7MB 9.6MB/s eta 0:00:01\r\u001b[K    62% |████████████████████            | 3.7MB 10.1MB/s eta 0:00:01\r\u001b[K    62% |████████████████████            | 3.7MB 10.2MB/s eta 0:00:01\r\u001b[K    62% |████████████████████            | 3.7MB 10.0MB/s eta 0:00:01\r\u001b[K    62% |████████████████████▏           | 3.7MB 8.8MB/s eta 0:00:01\r\u001b[K    63% |████████████████████▏           | 3.7MB 9.5MB/s eta 0:00:01\r\u001b[K    63% |████████████████████▎           | 3.7MB 11.4MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    63% |████████████████████▎           | 3.7MB 8.6MB/s eta 0:00:01\r\u001b[K    63% |████████████████████▍           | 3.7MB 9.3MB/s eta 0:00:01\r\u001b[K    63% |████████████████████▍           | 3.8MB 9.8MB/s eta 0:00:01\r\u001b[K    64% |████████████████████▌           | 3.8MB 9.9MB/s eta 0:00:01\r\u001b[K    64% |████████████████████▌           | 3.8MB 9.2MB/s eta 0:00:01\r\u001b[K    64% |████████████████████▋           | 3.8MB 8.6MB/s eta 0:00:01\r\u001b[K    64% |████████████████████▋           | 3.8MB 11.1MB/s eta 0:00:01\r\u001b[K    64% |████████████████████▊           | 3.8MB 8.3MB/s eta 0:00:01\r\u001b[K    64% |████████████████████▊           | 3.8MB 6.1MB/s eta 0:00:01\r\u001b[K    65% |████████████████████▉           | 3.8MB 6.4MB/s eta 0:00:01\r\u001b[K    65% |████████████████████▉           | 3.8MB 7.3MB/s eta 0:00:01\r\u001b[K    65% |█████████████████████           | 3.9MB 7.3MB/s eta 0:00:01\r\u001b[K    65% |█████████████████████           | 3.9MB 7.3MB/s eta 0:00:01\r\u001b[K    65% |█████████████████████           | 3.9MB 6.8MB/s eta 0:00:01\r\u001b[K    65% |█████████████████████           | 3.9MB 7.5MB/s eta 0:00:01\r\u001b[K    66% |█████████████████████▏          | 3.9MB 6.9MB/s eta 0:00:01\r\u001b[K    66% |█████████████████████▏          | 3.9MB 6.5MB/s eta 0:00:01\r\u001b[K    66% |█████████████████████▎          | 3.9MB 9.2MB/s eta 0:00:01\r\u001b[K    66% |█████████████████████▎          | 3.9MB 12.8MB/s eta 0:00:01\r\u001b[K    66% |█████████████████████▍          | 3.9MB 12.8MB/s eta 0:00:01\r\u001b[K    66% |█████████████████████▍          | 3.9MB 12.0MB/s eta 0:00:01\r\u001b[K    67% |█████████████████████▌          | 4.0MB 10.9MB/s eta 0:00:01\r\u001b[K    67% |█████████████████████▌          | 4.0MB 12.0MB/s eta 0:00:01\r\u001b[K    67% |█████████████████████▋          | 4.0MB 8.5MB/s eta 0:00:01\r\u001b[K    67% |█████████████████████▋          | 4.0MB 7.9MB/s eta 0:00:01\r\u001b[K    67% |█████████████████████▊          | 4.0MB 9.3MB/s eta 0:00:01\r\u001b[K    68% |█████████████████████▊          | 4.0MB 9.0MB/s eta 0:00:01\r\u001b[K    68% |█████████████████████▉          | 4.0MB 9.0MB/s eta 0:00:01\r\u001b[K    68% |█████████████████████▉          | 4.0MB 9.5MB/s eta 0:00:01\r\u001b[K    68% |██████████████████████          | 4.0MB 7.4MB/s eta 0:00:01\r\u001b[K    68% |██████████████████████          | 4.0MB 8.3MB/s eta 0:00:01\r\u001b[K    68% |██████████████████████          | 4.1MB 8.2MB/s eta 0:00:01\r\u001b[K    69% |██████████████████████          | 4.1MB 7.6MB/s eta 0:00:01\r\u001b[K    69% |██████████████████████▏         | 4.1MB 11.5MB/s eta 0:00:01\r\u001b[K    69% |██████████████████████▏         | 4.1MB 10.9MB/s eta 0:00:01\r\u001b[K    69% |██████████████████████▎         | 4.1MB 10.9MB/s eta 0:00:01\r\u001b[K    69% |██████████████████████▎         | 4.1MB 11.6MB/s eta 0:00:01\r\u001b[K    69% |██████████████████████▍         | 4.1MB 10.0MB/s eta 0:00:01\r\u001b[K    70% |██████████████████████▍         | 4.1MB 10.6MB/s eta 0:00:01\r\u001b[K    70% |██████████████████████▌         | 4.1MB 13.9MB/s eta 0:00:01\r\u001b[K    70% |██████████████████████▌         | 4.1MB 11.6MB/s eta 0:00:01\r\u001b[K    70% |██████████████████████▋         | 4.2MB 13.2MB/s eta 0:00:01\r\u001b[K    70% |██████████████████████▋         | 4.2MB 12.4MB/s eta 0:00:01\r\u001b[K    70% |██████████████████████▊         | 4.2MB 12.4MB/s eta 0:00:01\r\u001b[K    71% |██████████████████████▊         | 4.2MB 11.2MB/s eta 0:00:01\r\u001b[K    71% |██████████████████████▉         | 4.2MB 9.5MB/s eta 0:00:01\r\u001b[K    71% |██████████████████████▉         | 4.2MB 10.2MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    71% |███████████████████████         | 4.2MB 11.2MB/s eta 0:00:01\r\u001b[K    71% |███████████████████████         | 4.2MB 10.3MB/s eta 0:00:01\r\u001b[K    72% |███████████████████████         | 4.2MB 11.1MB/s eta 0:00:01\r\u001b[K    72% |███████████████████████         | 4.2MB 11.4MB/s eta 0:00:01\r\u001b[K    72% |███████████████████████▏        | 4.3MB 11.4MB/s eta 0:00:01\r\u001b[K    72% |███████████████████████▏        | 4.3MB 12.1MB/s eta 0:00:01\r\u001b[K    72% |███████████████████████▎        | 4.3MB 10.7MB/s eta 0:00:01\r\u001b[K    72% |███████████████████████▎        | 4.3MB 13.7MB/s eta 0:00:01\r\u001b[K    73% |███████████████████████▍        | 4.3MB 8.8MB/s eta 0:00:01\r\u001b[K    73% |███████████████████████▍        | 4.3MB 8.4MB/s eta 0:00:01\r\u001b[K    73% |███████████████████████▌        | 4.3MB 8.7MB/s eta 0:00:01\r\u001b[K    73% |███████████████████████▌        | 4.3MB 8.3MB/s eta 0:00:01\r\u001b[K    73% |███████████████████████▋        | 4.3MB 8.2MB/s eta 0:00:01\r\u001b[K    73% |███████████████████████▋        | 4.4MB 5.0MB/s eta 0:00:01\r\u001b[K    74% |███████████████████████▊        | 4.4MB 5.0MB/s eta 0:00:01\r\u001b[K    74% |███████████████████████▊        | 4.4MB 5.2MB/s eta 0:00:01\r\u001b[K    74% |███████████████████████▉        | 4.4MB 5.5MB/s eta 0:00:01\r\u001b[K    74% |███████████████████████▉        | 4.4MB 5.2MB/s eta 0:00:01\r\u001b[K    74% |████████████████████████        | 4.4MB 7.2MB/s eta 0:00:01\r\u001b[K    74% |████████████████████████        | 4.4MB 6.9MB/s eta 0:00:01\r\u001b[K    75% |████████████████████████        | 4.4MB 6.9MB/s eta 0:00:01\r\u001b[K    75% |████████████████████████        | 4.4MB 7.3MB/s eta 0:00:01\r\u001b[K    75% |████████████████████████▏       | 4.4MB 5.9MB/s eta 0:00:01\r\u001b[K    75% |████████████████████████▏       | 4.5MB 12.3MB/s eta 0:00:01\r\u001b[K    75% |████████████████████████▎       | 4.5MB 11.5MB/s eta 0:00:01\r\u001b[K    76% |████████████████████████▎       | 4.5MB 10.0MB/s eta 0:00:01\r\u001b[K    76% |████████████████████████▍       | 4.5MB 10.1MB/s eta 0:00:01\r\u001b[K    76% |████████████████████████▍       | 4.5MB 10.9MB/s eta 0:00:01\r\u001b[K    76% |████████████████████████▌       | 4.5MB 10.9MB/s eta 0:00:01\r\u001b[K    76% |████████████████████████▌       | 4.5MB 11.0MB/s eta 0:00:01\r\u001b[K    76% |████████████████████████▋       | 4.5MB 9.1MB/s eta 0:00:01\r\u001b[K    77% |████████████████████████▋       | 4.5MB 9.6MB/s eta 0:00:01\r\u001b[K    77% |████████████████████████▊       | 4.5MB 8.9MB/s eta 0:00:01\r\u001b[K    77% |████████████████████████▊       | 4.6MB 8.2MB/s eta 0:00:01\r\u001b[K    77% |████████████████████████▉       | 4.6MB 8.7MB/s eta 0:00:01\r\u001b[K    77% |████████████████████████▉       | 4.6MB 8.8MB/s eta 0:00:01\r\u001b[K    77% |█████████████████████████       | 4.6MB 8.9MB/s eta 0:00:01\r\u001b[K    78% |█████████████████████████       | 4.6MB 7.9MB/s eta 0:00:01\r\u001b[K    78% |█████████████████████████       | 4.6MB 7.4MB/s eta 0:00:01\r\u001b[K    78% |█████████████████████████       | 4.6MB 8.2MB/s eta 0:00:01\r\u001b[K    78% |█████████████████████████▏      | 4.6MB 8.8MB/s eta 0:00:01\r\u001b[K    78% |█████████████████████████▏      | 4.6MB 8.2MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    78% |█████████████████████████▎      | 4.6MB 12.3MB/s eta 0:00:01\r\u001b[K    79% |█████████████████████████▎      | 4.7MB 8.4MB/s eta 0:00:01\r\u001b[K    79% |█████████████████████████▍      | 4.7MB 8.4MB/s eta 0:00:01\r\u001b[K    79% |█████████████████████████▍      | 4.7MB 9.2MB/s eta 0:00:01\r\u001b[K    79% |█████████████████████████▌      | 4.7MB 9.2MB/s eta 0:00:01\r\u001b[K    79% |█████████████████████████▌      | 4.7MB 11.4MB/s eta 0:00:01\r\u001b[K    80% |█████████████████████████▋      | 4.7MB 5.9MB/s eta 0:00:01\r\u001b[K    80% |█████████████████████████▋      | 4.7MB 5.6MB/s eta 0:00:01\r\u001b[K    80% |█████████████████████████▊      | 4.7MB 6.0MB/s eta 0:00:01\r\u001b[K    80% |█████████████████████████▊      | 4.7MB 5.9MB/s eta 0:00:01\r\u001b[K    80% |█████████████████████████▉      | 4.8MB 6.0MB/s eta 0:00:01\r\u001b[K    80% |█████████████████████████▉      | 4.8MB 7.9MB/s eta 0:00:01\r\u001b[K    81% |██████████████████████████      | 4.8MB 6.7MB/s eta 0:00:01\r\u001b[K    81% |██████████████████████████      | 4.8MB 6.7MB/s eta 0:00:01\r\u001b[K    81% |██████████████████████████      | 4.8MB 5.2MB/s eta 0:00:01\r\u001b[K    81% |██████████████████████████▏     | 4.8MB 5.0MB/s eta 0:00:01\r\u001b[K    81% |██████████████████████████▏     | 4.8MB 9.2MB/s eta 0:00:01\r\u001b[K    81% |██████████████████████████▎     | 4.8MB 9.1MB/s eta 0:00:01\r\u001b[K    82% |██████████████████████████▎     | 4.8MB 9.1MB/s eta 0:00:01\r\u001b[K    82% |██████████████████████████▍     | 4.8MB 9.3MB/s eta 0:00:01\r\u001b[K    82% |██████████████████████████▍     | 4.9MB 8.3MB/s eta 0:00:01\r\u001b[K    82% |██████████████████████████▌     | 4.9MB 8.8MB/s eta 0:00:01\r\u001b[K    82% |██████████████████████████▌     | 4.9MB 9.0MB/s eta 0:00:01\r\u001b[K    82% |██████████████████████████▋     | 4.9MB 8.5MB/s eta 0:00:01\r\u001b[K    83% |██████████████████████████▋     | 4.9MB 13.2MB/s eta 0:00:01\r\u001b[K    83% |██████████████████████████▊     | 4.9MB 12.3MB/s eta 0:00:01\r\u001b[K    83% |██████████████████████████▊     | 4.9MB 12.3MB/s eta 0:00:01\r\u001b[K    83% |██████████████████████████▉     | 4.9MB 12.6MB/s eta 0:00:01\r\u001b[K    83% |██████████████████████████▉     | 4.9MB 9.5MB/s eta 0:00:01\r\u001b[K    84% |███████████████████████████     | 4.9MB 10.3MB/s eta 0:00:01\r\u001b[K    84% |███████████████████████████     | 5.0MB 11.0MB/s eta 0:00:01\r\u001b[K    84% |███████████████████████████     | 5.0MB 9.9MB/s eta 0:00:01\r\u001b[K    84% |███████████████████████████     | 5.0MB 12.3MB/s eta 0:00:01\r\u001b[K    84% |███████████████████████████▏    | 5.0MB 11.4MB/s eta 0:00:01\r\u001b[K    84% |███████████████████████████▏    | 5.0MB 11.4MB/s eta 0:00:01\r\u001b[K    85% |███████████████████████████▎    | 5.0MB 12.2MB/s eta 0:00:01\r\u001b[K    85% |███████████████████████████▎    | 5.0MB 10.3MB/s eta 0:00:01\r\u001b[K    85% |███████████████████████████▍    | 5.0MB 11.1MB/s eta 0:00:01\r\u001b[K    85% |███████████████████████████▍    | 5.0MB 14.2MB/s eta 0:00:01\r\u001b[K    85% |███████████████████████████▌    | 5.0MB 11.2MB/s eta 0:00:01\r\u001b[K    85% |███████████████████████████▌    | 5.1MB 12.1MB/s eta 0:00:01\r\u001b[K    86% |███████████████████████████▋    | 5.1MB 12.3MB/s eta 0:00:01\r\u001b[K    86% |███████████████████████████▋    | 5.1MB 12.3MB/s eta 0:00:01\r\u001b[K    86% |███████████████████████████▊    | 5.1MB 11.1MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    86% |███████████████████████████▊    | 5.1MB 9.0MB/s eta 0:00:01\r\u001b[K    86% |███████████████████████████▉    | 5.1MB 9.8MB/s eta 0:00:01\r\u001b[K    86% |███████████████████████████▉    | 5.1MB 10.7MB/s eta 0:00:01\r\u001b[K    87% |████████████████████████████    | 5.1MB 9.5MB/s eta 0:00:01\r\u001b[K    87% |████████████████████████████    | 5.1MB 9.9MB/s eta 0:00:01\r\u001b[K    87% |████████████████████████████    | 5.2MB 11.4MB/s eta 0:00:01\r\u001b[K    87% |████████████████████████████    | 5.2MB 11.4MB/s eta 0:00:01\r\u001b[K    87% |████████████████████████████▏   | 5.2MB 11.2MB/s eta 0:00:01\r\u001b[K    88% |████████████████████████████▏   | 5.2MB 10.2MB/s eta 0:00:01\r\u001b[K    88% |████████████████████████████▎   | 5.2MB 13.2MB/s eta 0:00:01\r\u001b[K    88% |████████████████████████████▎   | 5.2MB 14.5MB/s eta 0:00:01\r\u001b[K    88% |████████████████████████████▍   | 5.2MB 11.3MB/s eta 0:00:01\r\u001b[K    88% |████████████████████████████▍   | 5.2MB 12.0MB/s eta 0:00:01\r\u001b[K    88% |████████████████████████████▌   | 5.2MB 12.6MB/s eta 0:00:01\r\u001b[K    89% |████████████████████████████▌   | 5.2MB 12.7MB/s eta 0:00:01\r\u001b[K    89% |████████████████████████████▋   | 5.3MB 11.0MB/s eta 0:00:01\r\u001b[K    89% |████████████████████████████▋   | 5.3MB 10.3MB/s eta 0:00:01\r\u001b[K    89% |████████████████████████████▊   | 5.3MB 11.4MB/s eta 0:00:01\r\u001b[K    89% |████████████████████████████▊   | 5.3MB 7.8MB/s eta 0:00:01\r\u001b[K    89% |████████████████████████████▉   | 5.3MB 7.4MB/s eta 0:00:01\r\u001b[K    90% |████████████████████████████▉   | 5.3MB 8.1MB/s eta 0:00:01\r\u001b[K    90% |█████████████████████████████   | 5.3MB 8.8MB/s eta 0:00:01\r\u001b[K    90% |█████████████████████████████   | 5.3MB 8.8MB/s eta 0:00:01\r\u001b[K    90% |█████████████████████████████   | 5.3MB 8.7MB/s eta 0:00:01\r\u001b[K    90% |█████████████████████████████   | 5.3MB 8.1MB/s eta 0:00:01\r\u001b[K    90% |█████████████████████████████▏  | 5.4MB 9.4MB/s eta 0:00:01\r\u001b[K    91% |█████████████████████████████▏  | 5.4MB 7.3MB/s eta 0:00:01\r\u001b[K    91% |█████████████████████████████▎  | 5.4MB 6.8MB/s eta 0:00:01\r\u001b[K    91% |█████████████████████████████▎  | 5.4MB 10.1MB/s eta 0:00:01\r\u001b[K    91% |█████████████████████████████▍  | 5.4MB 9.8MB/s eta 0:00:01\r\u001b[K    91% |█████████████████████████████▍  | 5.4MB 9.8MB/s eta 0:00:01\r\u001b[K    92% |█████████████████████████████▌  | 5.4MB 10.3MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    92% |█████████████████████████████▌  | 5.4MB 2.4MB/s eta 0:00:01\r\u001b[K    92% |█████████████████████████████▋  | 5.4MB 2.4MB/s eta 0:00:01\r\u001b[K    92% |█████████████████████████████▋  | 5.4MB 2.5MB/s eta 0:00:01\r\u001b[K    92% |█████████████████████████████▊  | 5.5MB 2.5MB/s eta 0:00:01\r\u001b[K    92% |█████████████████████████████▊  | 5.5MB 2.8MB/s eta 0:00:01\r\u001b[K    93% |█████████████████████████████▉  | 5.5MB 2.8MB/s eta 0:00:01\r\u001b[K    93% |█████████████████████████████▉  | 5.5MB 2.8MB/s eta 0:00:01\r\u001b[K    93% |██████████████████████████████  | 5.5MB 2.9MB/s eta 0:00:01\r\u001b[K    93% |██████████████████████████████  | 5.5MB 2.9MB/s eta 0:00:01\r\u001b[K    93% |██████████████████████████████  | 5.5MB 3.0MB/s eta 0:00:01\r\u001b[K    93% |██████████████████████████████  | 5.5MB 81.7MB/s eta 0:00:01\r\u001b[K    94% |██████████████████████████████▏ | 5.5MB 83.0MB/s eta 0:00:01\r\u001b[K    94% |██████████████████████████████▏ | 5.6MB 84.7MB/s eta 0:00:01\r\u001b[K    94% |██████████████████████████████▎ | 5.6MB 85.8MB/s eta 0:00:01\r\u001b[K    94% |██████████████████████████████▎ | 5.6MB 86.3MB/s eta 0:00:01\r\u001b[K    94% |██████████████████████████████▍ | 5.6MB 86.5MB/s eta 0:00:01\r\u001b[K    94% |██████████████████████████████▍ | 5.6MB 85.3MB/s eta 0:00:01\r\u001b[K    95% |██████████████████████████████▌ | 5.6MB 87.2MB/s eta 0:00:01\r\u001b[K    95% |██████████████████████████████▌ | 5.6MB 88.0MB/s eta 0:00:01\r\u001b[K    95% |██████████████████████████████▋ | 5.6MB 86.6MB/s eta 0:00:01\r\u001b[K    95% |██████████████████████████████▋ | 5.6MB 90.1MB/s eta 0:00:01\r\u001b[K    95% |██████████████████████████████▊ | 5.6MB 93.9MB/s eta 0:00:01\r\u001b[K    96% |██████████████████████████████▊ | 5.7MB 95.0MB/s eta 0:00:01\r\u001b[K    96% |██████████████████████████████▉ | 5.7MB 95.9MB/s eta 0:00:01\r\u001b[K    96% |██████████████████████████████▉ | 5.7MB 94.2MB/s eta 0:00:01\r\u001b[K    96% |███████████████████████████████ | 5.7MB 96.3MB/s eta 0:00:01\r\u001b[K    96% |███████████████████████████████ | 5.7MB 96.8MB/s eta 0:00:01\r\u001b[K    96% |███████████████████████████████ | 5.7MB 80.0MB/s eta 0:00:01\r\u001b[K    97% |███████████████████████████████ | 5.7MB 79.2MB/s eta 0:00:01\r\u001b[K    97% |███████████████████████████████▏| 5.7MB 35.0MB/s eta 0:00:01\r\u001b[K    97% |███████████████████████████████▏| 5.7MB 34.5MB/s eta 0:00:01\r\u001b[K    97% |███████████████████████████████▎| 5.7MB 12.9MB/s eta 0:00:01\r\u001b[K    97% |███████████████████████████████▎| 5.8MB 11.5MB/s eta 0:00:01\r\u001b[K    97% |███████████████████████████████▍| 5.8MB 11.5MB/s eta 0:00:01\r\u001b[K    98% |███████████████████████████████▍| 5.8MB 9.1MB/s eta 0:00:01\r\u001b[K    98% |███████████████████████████████▌| 5.8MB 8.5MB/s eta 0:00:01\r\u001b[K    98% |███████████████████████████████▌| 5.8MB 8.5MB/s eta 0:00:01\r\u001b[K    98% |███████████████████████████████▋| 5.8MB 6.3MB/s eta 0:00:01\r\u001b[K    98% |███████████████████████████████▋| 5.8MB 6.3MB/s eta 0:00:01\r\u001b[K    98% |███████████████████████████████▊| 5.8MB 5.0MB/s eta 0:00:01\r\u001b[K    99% |███████████████████████████████▊| 5.8MB 4.2MB/s eta 0:00:01\r\u001b[K    99% |███████████████████████████████▉| 5.8MB 5.2MB/s eta 0:00:01\r\u001b[K    99% |███████████████████████████████▉| 5.9MB 5.3MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    99% |████████████████████████████████| 5.9MB 4.1MB/s eta 0:00:01\r\u001b[K    99% |████████████████████████████████| 5.9MB 4.6MB/s eta 0:00:01\r\u001b[K    100% |████████████████████████████████| 5.9MB 3.1MB/s \r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25hCollecting mpmath>=0.19 (from sympy)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7a/05/b3d1472885d8dc0606936ea5da0ccb1b4785682e78ab15e34ada24aea8d5/mpmath-1.0.0.tar.gz (511kB)\r\n\r\u001b[K    2% |▋                               | 10kB 3.0MB/s eta 0:00:01\r\u001b[K    4% |█▎                              | 20kB 4.7MB/s eta 0:00:01\r\u001b[K    6% |██                              | 30kB 5.5MB/s eta 0:00:01\r\u001b[K    8% |██▋                             | 40kB 5.4MB/s eta 0:00:01\r\u001b[K    10% |███▏                            | 51kB 6.1MB/s eta 0:00:01\r\u001b[K    12% |███▉                            | 61kB 7.2MB/s eta 0:00:01\r\u001b[K    14% |████▌                           | 71kB 7.5MB/s eta 0:00:01\r\u001b[K    16% |█████▏                          | 81kB 7.5MB/s eta 0:00:01\r\u001b[K    18% |█████▊                          | 92kB 8.2MB/s eta 0:00:01\r\u001b[K    20% |██████▍                         | 102kB 8.4MB/s eta 0:00:01\r\u001b[K    22% |███████                         | 112kB 11.3MB/s eta 0:00:01\r\u001b[K    24% |███████▊                        | 122kB 8.7MB/s eta 0:00:01\r\u001b[K    26% |████████▎                       | 133kB 5.1MB/s eta 0:00:01\r\u001b[K    28% |█████████                       | 143kB 5.6MB/s eta 0:00:01\r\u001b[K    30% |█████████▋                      | 153kB 5.3MB/s eta 0:00:01\r\u001b[K    32% |██████████▎                     | 163kB 5.0MB/s eta 0:00:01\r\u001b[K    34% |███████████                     | 174kB 5.2MB/s eta 0:00:01\r\u001b[K    36% |███████████▌                    | 184kB 5.2MB/s eta 0:00:01\r\u001b[K    38% |████████████▏                   | 194kB 5.2MB/s eta 0:00:01\r\u001b[K    40% |████████████▉                   | 204kB 4.4MB/s eta 0:00:01\r\u001b[K    42% |█████████████▌                  | 215kB 4.2MB/s eta 0:00:01\r\u001b[K    44% |██████████████                  | 225kB 4.9MB/s eta 0:00:01\r\u001b[K    46% |██████████████▊                 | 235kB 7.9MB/s eta 0:00:01\r\u001b[K    48% |███████████████▍                | 245kB 7.5MB/s eta 0:00:01\r\u001b[K    50% |████████████████                | 256kB 8.6MB/s eta 0:00:01\r\u001b[K    52% |████████████████▋               | 266kB 8.0MB/s eta 0:00:01\r\u001b[K    54% |█████████████████▎              | 276kB 8.1MB/s eta 0:00:01\r\u001b[K    56% |██████████████████              | 286kB 8.5MB/s eta 0:00:01\r\u001b[K    58% |██████████████████▋             | 296kB 7.8MB/s eta 0:00:01\r\u001b[K    60% |███████████████████▎            | 307kB 12.1MB/s eta 0:00:01\r\u001b[K    62% |███████████████████▉            | 317kB 11.6MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\u001b[K    64% |████████████████████▌           | 327kB 8.9MB/s eta 0:00:01\r\u001b[K    66% |█████████████████████▏          | 337kB 9.8MB/s eta 0:00:01\r\u001b[K    68% |█████████████████████▉          | 348kB 9.1MB/s eta 0:00:01\r\u001b[K    70% |██████████████████████▍         | 358kB 9.1MB/s eta 0:00:01\r\u001b[K    72% |███████████████████████         | 368kB 9.5MB/s eta 0:00:01\r\u001b[K    74% |███████████████████████▊        | 378kB 8.6MB/s eta 0:00:01\r\u001b[K    76% |████████████████████████▍       | 389kB 9.0MB/s eta 0:00:01\r\u001b[K    78% |█████████████████████████       | 399kB 8.2MB/s eta 0:00:01\r\u001b[K    80% |█████████████████████████▋      | 409kB 7.3MB/s eta 0:00:01\r\u001b[K    82% |██████████████████████████▎     | 419kB 8.1MB/s eta 0:00:01\r\u001b[K    84% |███████████████████████████     | 430kB 9.7MB/s eta 0:00:01\r\u001b[K    86% |███████████████████████████▌    | 440kB 9.8MB/s eta 0:00:01\r\u001b[K    88% |████████████████████████████▏   | 450kB 7.8MB/s eta 0:00:01\r\u001b[K    90% |████████████████████████████▉   | 460kB 7.4MB/s eta 0:00:01\r\u001b[K    92% |█████████████████████████████▌  | 471kB 8.3MB/s eta 0:00:01\r\u001b[K    94% |██████████████████████████████▏ | 481kB 7.5MB/s eta 0:00:01\r\u001b[K    96% |██████████████████████████████▊ | 491kB 7.3MB/s eta 0:00:01\r\u001b[K    98% |███████████████████████████████▍| 501kB 8.7MB/s eta 0:00:01\r\u001b[K    100% |████████████████████████████████| 512kB 7.8MB/s \r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25hInstalling collected packages: mpmath, sympy\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Running setup.py install for mpmath ... \u001b[?25l-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/\b \bdone\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25h  Running setup.py install for sympy ... \u001b[?25l-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b|"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b/"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b-"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b \b\\\b \bdone\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25hSuccessfully installed mpmath-1.0.0 sympy-1.3\r\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "!{sys.executable} -m pip install sympy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 5 tests in 0.005s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol\n",
    "from sympy import symbols\n",
    "\n",
    "\n",
    "class TestSymPy(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        expect = x + x + 1\n",
    "        self.assertEqual(expect, 2 * x + 1)\n",
    "\n",
    "    def test_02(self):\n",
    "        a = Symbol('x')\n",
    "        expect = a + a + 1\n",
    "        self.assertEqual(expect, 2 * a + 1)\n",
    "\n",
    "    def test_03(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        s = x * y + x * y\n",
    "        self.assertEqual(s, 2 * x * y)\n",
    "\n",
    "    def test_04(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        p = x * (x + x)\n",
    "        self.assertEqual(p, 2 * x ** 2)\n",
    "\n",
    "        x, y = symbols('x,y')\n",
    "        p = x * (x + x)\n",
    "        self.assertEqual(p, 2 * x ** 2)\n",
    "\n",
    "    def test_05(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        p = (x + 2) * (x + 3)\n",
    "        self.assertEqual(p, (x + 2) * (x + 3))\n",
    "\n",
    "        x, y = symbols('x,y')\n",
    "        p = (x + 2) * (x + 3)\n",
    "        self.assertEqual(p, (x + 2) * (x + 3))\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 式を扱う\n",
    "### 式の因数分解と展開"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$x^2-y^2$ = $(x-y)(x+y)$\n",
    "\n",
    "$x3 + 3x^2y + 3xy^2 + y^3$ = $(x + y)^3$\n",
    "\n",
    "$x + y + xy$ = $xy + x + y$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 4 tests in 0.018s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol\n",
    "from sympy import factor, expand\n",
    "\n",
    "\n",
    "class TestSymPy(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x ** 2 - y ** 2\n",
    "        self.assertEqual(factor(expr), (x - y) * (x + y))\n",
    "        \n",
    "    def test_02(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x**2 - y**2\n",
    "        factors = factor(expr)\n",
    "        self.assertEqual(expand(factors), x**2 - y**2)\n",
    "        \n",
    "    def test_03(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x**3 + 3*x**2*y + 3*x*y**2 + y**3\n",
    "        factors = factor(expr)\n",
    "        self.assertEqual(factors,(x + y)**3)\n",
    "        self.assertEqual(expand(factors),x**3 + 3*x**2*y + 3*x*y**2 + y**3)\n",
    "\n",
    "    def test_04(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x + y + x*y\n",
    "        self.assertEqual(factor(expr), x*y + x + y)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### プリティプリント"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$x^2 + 2xy + y^2$\n",
    "\n",
    "$2x^2 + 2x + 1$\n",
    "\n",
    "$1 + 2x + 2x^2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x**2 + 2*x*y + y**2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 2            2\nx  + 2⋅x⋅y + y \n   2          \n2⋅x  + 2⋅x + 1\n   2          \n2⋅x  + 2⋅x + 1\n"
     ]
    }
   ],
   "source": [
    "from sympy import Symbol\n",
    "from sympy import pprint\n",
    "from sympy import init_printing\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    x = Symbol('x')\n",
    "    y = Symbol('y')\n",
    "    expr = x*x + 2*x*y + y*y\n",
    "    print(expr)\n",
    "    pprint(expr, use_unicode=True)\n",
    "    expr = 1 + 2*x + 2*x**2\n",
    "    pprint(expr, use_unicode=True)\n",
    "    init_printing(order='rev-lex')\n",
    "    pprint(expr, use_unicode=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 級数を出力する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$x + \\frac{x^2}{2} + \\frac{x^3}{3} + \\frac{x^4}{4} + ... + \\frac{x^n}{n}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x\n 2    \nx     \n── + x\n2     \n 3    2    \nx    x     \n── + ── + x\n3    2     \n 4    3    2    \nx    x    x     \n── + ── + ── + x\n4    3    2     \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 5 tests in 0.017s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, pprint, init_printing\n",
    "\n",
    "'''\n",
    "級数を出力\n",
    "x + x**2 + x**3 + ... + x**n\n",
    "    ---    ---          ---\n",
    "     2      3            n\n",
    "xの値で級数の値を計算\n",
    "'''\n",
    "def print_series(n):\n",
    "    # 出力を逆順に初期化\n",
    "    init_printing(order='rev-lex')\n",
    "    x = Symbol('x')\n",
    "    series = x\n",
    "    for i in range(2, n + 1):\n",
    "        series = series + (x ** i) / i\n",
    "    pprint(series)\n",
    "    return series\n",
    "\n",
    "\n",
    "class TestPrintSeries(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        self.assertEqual(print_series(1), x)\n",
    "        self.assertEqual(print_series(2), x ** 2 / 2 + x)\n",
    "        self.assertEqual(print_series(3), x ** 3 / 3 + x ** 2 / 2 + x)\n",
    "        self.assertEqual(print_series(4), x ** 4 / 4 + x ** 3 / 3 + x ** 2 / 2 + x)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 値に代入する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "$xx + xy + xy + yy$ \n",
    "\n",
    "$x = 1, y = 2$ \n",
    "\n",
    "$9$ \n",
    "\n",
    "$x = y - 1$\n",
    "\n",
    "$y^2 + 2y(-y + 1)+(-y + 1)^2$ \n",
    "\n",
    "$y^2 - 2y^2 + 2y + y^2 -2y + 1$ \n",
    "\n",
    "$1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x\n 2    \nx     \n── + x\n2     \n 3    2    \nx    x     \n── + ── + x\n3    2     \n 4    3    2    \nx    x    x     \n── + ── + ── + x\n4    3    2     \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 4 tests in 0.020s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol\n",
    "from sympy import factor, expand, simplify\n",
    "\n",
    "\n",
    "class TestSymPy(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x * x + x * y + x * y + y * y\n",
    "        self.assertEqual(expr.subs({x: 1, y: 2}), 9)\n",
    "\n",
    "    def test_02(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x * x + x * y + x * y + y * y\n",
    "        self.assertEqual(expr.subs({x: 1 - y}), y ** 2 + 2 * y * (-y + 1) + (-y + 1) ** 2)\n",
    "\n",
    "    def test_03(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr = x * x + x * y + x * y + y * y\n",
    "        expr_subs = expr.subs({x: 1 - y})\n",
    "        self.assertEqual(simplify(expr_subs), 1)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 級数の値を計算する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5    4    3    2    \nx    x    x    x     \n── + ── + ── + ── + x\n5    4    3    2     \nValue of the series at 12: 278052/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 1 test in 0.475s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, pprint, init_printing\n",
    "\n",
    "\n",
    "def print_series(n, x_value):\n",
    "    # 出力を逆順に初期化\n",
    "    init_printing(order='rev-lex')\n",
    "    x = Symbol('x')\n",
    "    series = x\n",
    "    for i in range(2, n+1):\n",
    "        series = series + (x**i)/i\n",
    "    pprint(series)\n",
    "\n",
    "    # x_valueで級数評価\n",
    "    series_value = series.subs({x:x_value})\n",
    "    print('Value of the series at {0}: {1}'.format(x_value, series_value))\n",
    "    return series_value\n",
    "\n",
    "\n",
    "class TestPrintSeries(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        self.assertEqual(print_series(5,12), 278052/5)\n",
    "        \n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 文字列を数式に変換する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 数式乗算器"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5    4    3    2    \nx    x    x    x     \n── + ── + ── + ── + x\n5    4    3    2     \nValue of the series at 12: 278052/5\nx**5 + 3*x**4 + 4*x**3 + 12*x**2\nx**3*y + x**3 + x*y**2 + x*y\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 3 tests in 0.009s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, expand, sympify\n",
    "from sympy.core.sympify import SympifyError\n",
    "\n",
    "'''\n",
    "２式の積\n",
    "'''\n",
    "def product(expr1, expr2):\n",
    "    try:\n",
    "        expr1 = sympify(expr1)\n",
    "        expr2 = sympify(expr2)\n",
    "    except SympifyError:\n",
    "        print('Invalid input')\n",
    "    else:\n",
    "        prod = expand(expr1 * expr2)\n",
    "        print(prod)\n",
    "        return prod\n",
    "\n",
    "\n",
    "class TestProduct(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        expr1 = x ** 2 + x * 2 + x\n",
    "        expr2 = x ** 3 + x * 3 + x\n",
    "        self.assertEqual(product(expr1, expr2), x ** 5 + 3 * x ** 4 + 4 * x ** 3 + 12 * x ** 2)\n",
    "        \n",
    "    def test_02(self):\n",
    "        x = Symbol('x')\n",
    "        y = Symbol('y')\n",
    "        expr1 = x*y+x\n",
    "        expr2 = x*x+y\n",
    "        self.assertEqual(product(expr1, expr2), x**3*y + x**3 + x*y**2 + x*y)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 方程式を解く"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5    4    3    2    \nx    x    x    x     \n── + ── + ── + ── + x\n5    4    3    2     \nValue of the series at 12: 278052/5\nx**5 + 3*x**4 + 4*x**3 + 12*x**2\nx**3*y + x**3 + x*y**2 + x*y\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 4 tests in 0.012s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, solve\n",
    "\n",
    "class TestSolve(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        expr = x - 5 - 7\n",
    "        self.assertEqual(solve(expr), [12])\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2次方程式を解く"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$x^2 + 5^x + 4$ \n",
    "\n",
    "$x^2 + x + 1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5    4    3    2    \nx    x    x    x     \n── + ── + ── + ── + x\n5    4    3    2     \nValue of the series at 12: 278052/5\nx**5 + 3*x**4 + 4*x**3 + 12*x**2\nx**3*y + x**3 + x*y**2 + x*y\n⎡⎧     1   √3⋅ⅈ⎫  ⎧     1   √3⋅ⅈ⎫⎤\n⎢⎨x: - ─ - ────⎬, ⎨x: - ─ + ────⎬⎥\n⎣⎩     2    2  ⎭  ⎩     2    2  ⎭⎦\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n----------------------------------------------------------------------\nRan 5 tests in 0.080s\n\nOK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "from sympy import Symbol, solve, pprint\n",
    "\n",
    "\n",
    "class TestSolve(unittest.TestCase):\n",
    "    def test_01(self):\n",
    "        x = Symbol('x')\n",
    "        expr = x ** 2 + 5 * x + 4\n",
    "        self.assertEqual(solve(expr), [-4, -1])\n",
    "        self.assertEqual(solve(expr, dict=True), [{x: -4}, {x: -1}])\n",
    "        \n",
    "    def test_02(self):\n",
    "        x = Symbol('x')\n",
    "        expr = x**2 + x + 1\n",
    "        pprint(solve(expr, dict=True))\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### １変数を他の変数について解く"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$s = ut + \\frac{1}{2}att$ \n",
    "\n",
    "$t:\\frac{1}{a}(-u+\\sqrt{2.0as + u^2})$ \n",
    "\n",
    "$t:-\\frac{1}{a}(-u+\\sqrt{2.0as + u^2})$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "⎡⎧           ______________⎫  ⎧    ⎛       ______________⎞ ⎫⎤\n⎢⎪          ╱            2 ⎪  ⎪    ⎜      ╱            2 ⎟ ⎪⎥\n⎢⎨   -u + ╲╱  2.0⋅a⋅s + u  ⎬  ⎨   -⎝u + ╲╱  2.0⋅a⋅s + u  ⎠ ⎬⎥\n⎢⎪t: ──────────────────────⎪, ⎪t: ─────────────────────────⎪⎥\n⎣⎩             a           ⎭  ⎩               a            ⎭⎦\n"
     ]
    }
   ],
   "source": [
    "from sympy import Symbol, solve, pprint\n",
    "\n",
    "s = Symbol('s')\n",
    "u = Symbol('u')\n",
    "t = Symbol('t')\n",
    "a = Symbol('a')\n",
    "expr = u*t + (1/2)*a*t*t - s\n",
    "t_expr = solve(expr, t, dict=True)\n",
    "pprint(t_expr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 連立方程式を解く"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$2x + 3y = 6$ \n",
    "\n",
    "$3x + 2y = 12$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{x: 24/5, y: -6/5}]\n0\n0\n"
     ]
    }
   ],
   "source": [
    "from sympy import Symbol, solve, pprint\n",
    "\n",
    "x = Symbol('x')\n",
    "y = Symbol('y')\n",
    "expr1 = 2 * x + 3 * y - 6\n",
    "expr2 = 3 * x + 2 * y - 12\n",
    "soln = solve((expr1, expr2), dict=True)\n",
    "print(soln)\n",
    "soln = soln[0]\n",
    "expr1 = expr1.subs({x: soln[x], y: soln[y]})\n",
    "print(expr1)\n",
    "expr2 = expr2.subs({x: soln[x], y: soln[y]})\n",
    "print(expr2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SymPyを使ってプロットする"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$y = 2x+3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<sympy.plotting.plot.Plot at 0x1211c1b38>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sympy.plotting import plot\n",
    "from sympy import Symbol\n",
    "\n",
    "x = Symbol('x')\n",
    "plot(2*x*3)\n",
    "plot((2*x + 3),(x, -5, 5))\n",
    "plot(2*x + 3,(x, -5, 5), title='A Line', xlabel='x', ylabel='2x+3')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ユーザが入力した式をプロットする"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "StdinNotImplementedError",
     "evalue": "raw_input was called, but this frontend does not support input requests.",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mStdinNotImplementedError\u001b[0m                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-23-7c45bf5a74c0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mexpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Enter your expression in terms of x and y: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mexpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msympify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.pyenv/versions/3.7.0/lib/python3.7/site-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    697\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_allow_stdin\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    698\u001b[0m             raise StdinNotImplementedError(\n\u001b[0;32m--> 699\u001b[0;31m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    700\u001b[0m             )\n\u001b[1;32m    701\u001b[0m         return self._input_request(str(prompt),\n",
      "\u001b[0;31mStdinNotImplementedError\u001b[0m: raw_input was called, but this frontend does not support input requests."
     ],
     "output_type": "error"
    }
   ],
   "source": [
    "from sympy import Symbol, sympify, solve\n",
    "from sympy.plotting import plot\n",
    "\n",
    "def plot_expression(expr):\n",
    "    y = Symbol('y')\n",
    "    solutions = solve(expr, y)\n",
    "    expr_y = solutions[0]\n",
    "    plot(expr_y)\n",
    "    \n",
    "    \n",
    "if __name__ == '__main__':\n",
    "    \n",
    "    expr = input('Enter your expression in terms of x and y: ')\n",
    "    try:\n",
    "        expr = sympify(expr)\n",
    "    except SympifyError:\n",
    "        print('Invalid input')\n",
    "    else:\n",
    "        plot_expression(expr)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 複数の関数をプロットする"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$y=2x+3$ \n",
    "\n",
    "$y=3x+1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<sympy.plotting.plot.Plot at 0x121883898>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sympy.plotting import plot\n",
    "from sympy import Symbol\n",
    "x = Symbol('x')\n",
    "plot(2*x+3, 3*x+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sympy.plotting import plot\n",
    "from sympy import Symbol\n",
    "x = Symbol('x')\n",
    "p = plot(2*x+3, 3*x+1, lengend=True, show=False)\n",
    "p[0].line_color = 'b'\n",
    "p[1].line_color = 'r'\n",
    "p.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
