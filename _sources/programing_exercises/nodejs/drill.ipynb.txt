{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Node.js"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## FizzBuzz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 仕様\n",
    "+ 3で割り切れる場合はFizzを出力する\n",
    "+ 5で割り切れる場合はBuzzを出力する\n",
    "+ 両方で割り切れる場合はFizzBuzzを出力する\n",
    "+ 指定された回数だけ繰り返し実行できるようにする"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 設計\n",
    "#### TODOリスト\n",
    "+ ~~3ならばFizzを返すようにする~~\n",
    "+ ~~5ならばBuzzを返すようにする~~\n",
    "+ ~~15ならばFizzBuzzを返すようにする~~\n",
    "+ ~~指定された回数だけだけ実行できるようにする~~"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ReferenceError",
     "evalue": "describe is not defined",
     "traceback": [
      "evalmachine.<anonymous>:27",
      "describe('TestFizzBuzz', function () {",
      "^",
      "",
      "ReferenceError: describe is not defined",
      "    at evalmachine.<anonymous>:27:1",
      "    at ContextifyScript.Script.runInThisContext (vm.js:50:33)",
      "    at Object.runInThisContext (vm.js:139:38)",
      "    at run ([eval]:1002:15)",
      "    at onRunRequest ([eval]:829:18)",
      "    at onMessage ([eval]:789:13)",
      "    at emitTwo (events.js:126:13)",
      "    at process.emit (events.js:214:7)",
      "    at emit (internal/child_process.js:772:12)",
      "    at _combinedTickCallback (internal/process/next_tick.js:141:11)"
     ],
     "output_type": "error"
    }
   ],
   "source": [
    "const fizzBuzz = class FizzBuzz {\n",
    "    static generate(number) {\n",
    "        let value = number;\n",
    "\n",
    "        if (value % 3 === 0 && value % 5 === 0) {\n",
    "            value = 'FizzBuzz'\n",
    "        } else if (value % 3 === 0) {\n",
    "            value = 'Fizz'\n",
    "        } else if (value % 5 === 0) {\n",
    "            value = 'Buzz'\n",
    "        }\n",
    "\n",
    "        return value;\n",
    "    }\n",
    "\n",
    "    static iterate(count) {\n",
    "    const array = [];\n",
    "\n",
    "    for (let i = 1; i <= count; i += 1) {\n",
    "        array.push(FizzBuzz.generate(i));\n",
    "    }\n",
    "\n",
    "    return array;\n",
    "    }\n",
    "}\n",
    "\n",
    "describe('TestFizzBuzz', function () {\n",
    "    it('3ならばFizzを返すようにする', function () {\n",
    "        expect(fizzBuzz.generate(3)).toBe('Fizz')\n",
    "    });\n",
    "\n",
    "    it('5ならばBuzzを返すようにする', function () {\n",
    "        expect(fizzBuzz.generate(5)).toBe('Buzz')\n",
    "    });\n",
    "\n",
    "    it('15ならばFizzBuzzを返すようにする', function () {\n",
    "        expect(fizzBuzz.generate(15)).toBe('FizzBuzz')\n",
    "    });\n",
    "\n",
    "    it('指定された回数だけ実行できるようにする', function () {\n",
    "        expect(fizzBuzz.iterate(5)).toEqual([1, 2, 'Fizz', 4, 'Buzz'])\n",
    "    })\n",
    "});"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 開発\n",
    "### イテレーション1\n",
    "仕様を満たすアプリケーションを**できるだけ早く試作する**ために**テストファーストプログラミング**を実施する。実施にあたってまず**TODOリスト**を作成する。\n",
    "  \n",
    "**TODOリスト**を作成したら**インクリメンタルな設計**を実施する。実施するにあたってまず**単一責任の原則**に従い関心事を表すクラスを定義する。ここではFizzBuzzそのものを関心事として扱うことにする。\n",
    "  \n",
    "**テストファースト**でFizzBuzzとテストの関数を作成する。\n",
    "  \n",
    "クラスを定義したので**テストメソッド**を作成に入る。まず**TODOリスト**を元にアウトラインを作成する。\n",
    "  \n",
    "アウトラインをを作成したら**一歩を示すテスト**に取り掛かる、**TODOリスト**から失敗する**はじめのテスト**を作成する。テストコードは**アサートファースト**でレッドになることを確認したら仮実装でグリーンにする。**一つのプログラムには一つのことをうまくやらせる**ことを心がける。**アサーション**は期待値を後に書く。\n",
    "  \n",
    "グリーンの状態になったら**仮実装を経て本実装へ**入る。**明白な実装**を行って最初の**TODOリスト**を片付ける。**条件分岐**と**演算子**を使って本実装を行う。**YAGNI**に従い今必要な機能だけを実装する。\n",
    "  \n",
    "引き続き**TODOリスト**の２つ目に取り掛かる。**はじめのテスト**を失敗させる。失敗することを確認したら**明白な実装**によりテスト結果をグリーンにする。最初のコードに追記するだけでは意図した結果にならなかったので**式**を変更して結果をグリーンにした。**TODOリスト**の２つ目を完了にする。\n",
    "  \n",
    "続いて、**TODOリスト**の３つ目に着手する。今回は複数の条件なので新たな**演算子**を使って実装する。実装に際してロジックの順番の間違いと判断条件の間違いとコピペによる間違いを犯していたが全てテストで気づくことができた。\n",
    "  \n",
    "**TODOリスト**の割り算機能の最後のタスクに取り掛かる。今回のテストは前回のテストの派生系なので**三角測量**で実装する。まずは失敗するテストを追加する。**明白な実装**によりテストをグリーンにして**TODOリスト**の割り算機能のタスクを片付ける。テストのアウトラインがなくても意図は読み取れるようになったので**コメント**は削除する。\n",
    "  \n",
    "続いて、**TODOリスト**の残りの実行機能に取り組む。まず**インクリメンタルな設計**によりクラスのインタフェースを設計する。**一つのプログラムには一つのことをうまくやらせる**ことを意識する。\n",
    "  \n",
    "実行機能はまだ正しい実装が見えてこないので**仮実装を経て本実装へ**の前に**三角測量**を実施する。**ローカル変数**を初期化して**繰り返し**の制御構文で実行された最後の結果を返す実装をしたがテストにはまだパスしない。テストから**演算子**の間違いを発見しさらに仮実装の間違いがあることが判明したのでテストを修正してグリーンにする。\n",
    "  \n",
    "仕様を確認したところ間違いがあったので修正してテストも修正してグリーンになることを確認した。また、仕様に明記されていない条件が判明したので**TODOリスト**に追加する。\n",
    "  \n",
    "最初のイテレーションを完了させるにあたって**ふりかえり**を実施する。\n",
    "\n",
    "### ふりかえり\n",
    "#### Keep\n",
    "+ **一つのプログラムには一つのことをうまくやらせる**基本定理に従い**単一責任の原則**に沿ったクラス設計をを実施した。\n",
    "+ **できるだけ早く試作する**ために**インクリメンタルな設計**を**テストファーストプログラミング**と取り組むための**TODOリスト**を作成した。\n",
    "+ 仕様に明記されていない項目を**TODOリスト**に反映した。\n",
    "+ **TODOリスト**に従い**テストファースト**で**一歩を示すテスト**を作成した\n",
    "+ まず**はじめのテスト**を**アサートファースト**で取り掛かり**ベイビーステップ**ですすめて行った。\n",
    "+ 何を書くべきかわかっているときは、**明白な実装**を行い、わからないときには**仮実装**を行い、まだ正しい実装が見えてこないときには**三角測量**を行いながら**仮実装を経て本実装へ**と進めた。\n",
    "\n",
    "#### Problem\n",
    "+ Nodejsのスタティックメソッドの定義にはまる\n",
    "\n",
    "#### Try\n",
    "+ Jestを理解する\n",
    "\n",
    "## 参照\n",
    "+ [Jest](https://jestjs.io/ja/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Javascript (Node.js)",
   "language": "javascript",
   "name": "javascript"
  },
  "language_info": {
   "file_extension": ".js",
   "mimetype": "application/javascript",
   "name": "javascript",
   "version": "8.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
