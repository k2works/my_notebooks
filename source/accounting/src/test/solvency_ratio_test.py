import unittest
from balance_sheet import *
from solvency_ratio import *
import math


class Test安全性分析(unittest.TestCase):
    def setUp(self):
        _流動資産内訳 = [
            現金及び預金(13500),
            受取手形(10000),
            売掛金(15000),
            貸倒引当金(600, 科目.貸),
            有価証券(2000),
            商品(30000),
            前払費用(1000),
            未収収益(1200)
        ]
        _流動資産 = 流動資産(_流動資産内訳)
        _有形固定資産内訳 = [
            土地(33000),
            建物(50000),
            減価償却累計(10000, 科目.貸)
        ]
        _無形固定資産内訳 = [
            のれん(1000)
        ]
        _投資その他の資産内訳 = [
            関係会社株式(3500),
            投資有価証券(3000),
            長期貸付金(2000),
            貸倒引当金(200, 科目.貸)
        ]
        _固定資産内訳 = [
            有形固定資産(_有形固定資産内訳),
            無形固定資産(_無形固定資産内訳),
            投資その他の資産(_投資その他の資産内訳)
        ]
        _固定資産 = 固定資産(_固定資産内訳)
        _繰延資産内訳 = [
            開業費(1000)
        ]
        _繰延資産 = 繰延資産(_繰延資産内訳)
        _流動負債内訳 = [
            買掛金(29800),
            短期借入金(22900),
            未払法人税等(200),
            未払費用(500),
            前受収益(1000),
            賞与引当金(1500)
        ]
        _流動負債 = 流動負債(_流動負債内訳)
        _固定負債内訳 = [
            社債(15000),
            長期借入金(20000),
            退職給付金(5000)
        ]
        _固定負債 = 固定負債(_固定負債内訳)
        _株主資本内訳 = [
            資本金(35000),
            資本剰余金([
                資本準備金(10000),
                その他資本剰余金(2000)
            ]),
            利益剰余金([
                利益準備金(2000),
                その他利益剰余金([
                    任意積立金(1500),
                    繰越利益剰余金(10000)
                ])
            ]),
            自己株式(1000, 科目.借)
        ]
        _純資産内訳 = [
            株主資本(_株主資本内訳),
            評価換算差額等(0),
            新株予約権(0)
        ]
        _純資産 = 純資産(_純資産内訳)

        _貸借対照表 = 貸借対照表(_流動資産, _固定資産, _繰延資産, _流動負債, _固定負債, _純資産)
        self.安全性分析 = 安全性分析(_貸借対照表)

    def test流動比率(self):
        self.assertEqual(129, self.安全性分析.流動比率)

    def test当座比率(self):
        self.assertEqual(54, self.安全性分析.当座比率)

    def test固定比率(self):
        self.assertEqual(139, self.安全性分析.固定比率)

    def test固定長期適合率(self):
        self.assertEqual(1, self.安全性分析.固定長期適合率)

    def test自己資本比率(self):
        self.assertEqual(39, self.安全性分析.自己資本比率)

    def test負債比率(self):
        self.assertEqual(162, self.安全性分析.負債比率)

if __name__ == "__main__":
    unittest.main()
